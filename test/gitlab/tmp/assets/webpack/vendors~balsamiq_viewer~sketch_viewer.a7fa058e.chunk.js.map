{"version":3,"sources":["webpack:////home/git/gitlab/node_modules/readable-stream/lib/_stream_duplex.js","webpack:////home/git/gitlab/node_modules/stream-browserify/index.js","webpack:////home/git/gitlab/node_modules/core-util-is/lib/util.js","webpack:////home/git/gitlab/node_modules/process-nextick-args/index.js","webpack:////home/git/gitlab/node_modules/readable-stream/readable-browser.js","webpack:////home/git/gitlab/node_modules/readable-stream/lib/_stream_writable.js","webpack:////home/git/gitlab/node_modules/readable-stream/lib/_stream_readable.js","webpack:////home/git/gitlab/node_modules/readable-stream/lib/internal/streams/stream-browser.js","webpack:////home/git/gitlab/node_modules/readable-stream/lib/internal/streams/destroy.js","webpack:////home/git/gitlab/node_modules/readable-stream/lib/_stream_transform.js","webpack:////home/git/gitlab/node_modules/readable-stream/lib/internal/streams/BufferList.js","webpack:////home/git/gitlab/node_modules/util-deprecate/browser.js","webpack:////home/git/gitlab/node_modules/readable-stream/lib/_stream_passthrough.js","webpack:////home/git/gitlab/node_modules/readable-stream/writable-browser.js","webpack:////home/git/gitlab/node_modules/readable-stream/duplex-browser.js","webpack:////home/git/gitlab/node_modules/readable-stream/transform.js","webpack:////home/git/gitlab/node_modules/readable-stream/passthrough.js"],"names":["pna","__webpack_require__","objectKeys","Object","keys","obj","key","push","module","exports","Duplex","util","inherits","Readable","Writable","prototype","v","length","method","options","this","call","readable","writable","allowHalfOpen","once","onend","_writableState","ended","nextTick","onEndNT","self","end","defineProperty","enumerable","get","highWaterMark","undefined","_readableState","destroyed","set","value","_destroy","err","cb","Stream","EE","EventEmitter","Transform","PassThrough","pipe","dest","source","ondata","chunk","write","pause","ondrain","resume","on","_isStdio","onclose","didOnEnd","destroy","onerror","er","cleanup","listenerCount","removeListener","emit","Buffer","objectToString","o","toString","isArray","arg","Array","isBoolean","isNull","isNullOrUndefined","isNumber","isString","isSymbol","isUndefined","isRegExp","re","isObject","isDate","d","isError","e","Error","isFunction","isPrimitive","isBuffer","process","version","indexOf","fn","arg1","arg2","arg3","TypeError","args","i","len","arguments","apply","setImmediate","global","CorkedRequest","state","_this","next","entry","finish","corkReq","callback","pendingcb","corkedRequestsFree","onCorkedFinish","asyncWrite","browser","slice","WritableState","internalUtil","deprecate","OurUint8Array","Uint8Array","realHasInstance","destroyImpl","nop","stream","isDuplex","objectMode","writableObjectMode","hwm","writableHwm","writableHighWaterMark","defaultHwm","Math","floor","finalCalled","needDrain","ending","finished","noDecode","decodeStrings","defaultEncoding","writing","corked","sync","bufferProcessing","onwrite","writecb","writelen","onwriteStateUpdate","finishMaybe","errorEmitted","onwriteError","needFinish","bufferedRequest","clearBuffer","afterWrite","lastBufferedRequest","prefinished","bufferedRequestCount","_write","writev","_writev","final","_final","doWrite","encoding","onwriteDrain","l","buffer","holder","count","allBuffers","isBuf","callFinal","need","prefinish","getBuffer","current","out","_","Symbol","hasInstance","Function","object","ret","from","_uint8ArrayToBuffer","writeAfterEnd","valid","validChunk","newChunk","decodeChunk","last","writeOrBuffer","cork","uncork","setDefaultEncoding","toLowerCase","endWritable","_undestroy","undestroy","ReadableState","EElistenerCount","emitter","type","listeners","debugUtil","debug","debuglog","StringDecoder","BufferList","kProxyEvents","readableObjectMode","readableHwm","readableHighWaterMark","pipes","pipesCount","flowing","endEmitted","reading","needReadable","emittedReadable","readableListening","resumeScheduled","awaitDrain","readingMore","decoder","read","_read","readableAddChunk","addToFront","skipChunkCheck","emitReadable","onEofChunk","chunkInvalid","getPrototypeOf","addChunk","maybeReadMore","needMoreData","unshift","isPaused","setEncoding","enc","MAX_HWM","howMuchToRead","n","head","data","computeNewHighWaterMark","emitReadable_","flow","maybeReadMore_","nReadingNextTick","resume_","fromList","shift","join","concat","clear","list","hasStrings","p","c","str","nb","tail","copyFromBufferString","allocUnsafe","copy","buf","copyFromBuffer","fromListPartial","endReadable","endReadableNT","xs","x","parseInt","nOrig","doRead","pipeOpts","src","endFn","stdout","stderr","unpipe","onunpipe","unpipeInfo","hasUnpiped","onfinish","cleanedUp","pipeOnDrain","increasedAwaitDrain","event","prependListener","_events","dests","index","splice","ev","res","addListener","wrap","paused","bind","_fromList","emitErrorNT","readableDestroyed","writableDestroyed","_transformState","afterTransform","ts","transforming","writechunk","rs","needTransform","writeencoding","transform","_transform","flush","_flush","done","_this2","err2","instance","Constructor","_classCallCheck","s","alloc","target","offset","inspect","custom","constructor","name","config","localStorage","val","String","msg","warned","console","trace","warn"],"mappings":"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","file":"vendors~balsamiq_viewer~sketch_viewer.a7fa058e.chunk.js","sourcesContent":["// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototypal inheritance, this class\n// prototypally inherits from Readable, and then parasitically from\n// Writable.\n\n'use strict';\n\n/*<replacement>*/\n\nvar pna = require('process-nextick-args');\n/*</replacement>*/\n\n/*<replacement>*/\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var key in obj) {\n    keys.push(key);\n  }return keys;\n};\n/*</replacement>*/\n\nmodule.exports = Duplex;\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nvar Readable = require('./_stream_readable');\nvar Writable = require('./_stream_writable');\n\nutil.inherits(Duplex, Readable);\n\n{\n  // avoid scope creep, the keys array can then be collected\n  var keys = objectKeys(Writable.prototype);\n  for (var v = 0; v < keys.length; v++) {\n    var method = keys[v];\n    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];\n  }\n}\n\nfunction Duplex(options) {\n  if (!(this instanceof Duplex)) return new Duplex(options);\n\n  Readable.call(this, options);\n  Writable.call(this, options);\n\n  if (options && options.readable === false) this.readable = false;\n\n  if (options && options.writable === false) this.writable = false;\n\n  this.allowHalfOpen = true;\n  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;\n\n  this.once('end', onend);\n}\n\nObject.defineProperty(Duplex.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function () {\n    return this._writableState.highWaterMark;\n  }\n});\n\n// the no-half-open enforcer\nfunction onend() {\n  // if we allow half-open state, or if the writable side ended,\n  // then we're ok.\n  if (this.allowHalfOpen || this._writableState.ended) return;\n\n  // no more data can be written.\n  // But allow more writes to happen in this tick.\n  pna.nextTick(onEndNT, this);\n}\n\nfunction onEndNT(self) {\n  self.end();\n}\n\nObject.defineProperty(Duplex.prototype, 'destroyed', {\n  get: function () {\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return false;\n    }\n    return this._readableState.destroyed && this._writableState.destroyed;\n  },\n  set: function (value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._readableState.destroyed = value;\n    this._writableState.destroyed = value;\n  }\n});\n\nDuplex.prototype._destroy = function (err, cb) {\n  this.push(null);\n  this.end();\n\n  pna.nextTick(cb, err);\n};","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nmodule.exports = Stream;\n\nvar EE = require('events').EventEmitter;\nvar inherits = require('inherits');\n\ninherits(Stream, EE);\nStream.Readable = require('readable-stream/readable.js');\nStream.Writable = require('readable-stream/writable.js');\nStream.Duplex = require('readable-stream/duplex.js');\nStream.Transform = require('readable-stream/transform.js');\nStream.PassThrough = require('readable-stream/passthrough.js');\n\n// Backwards-compat with node 0.4.x\nStream.Stream = Stream;\n\n\n\n// old-style streams.  Note that the pipe method (the only relevant\n// part of this class) is overridden in the Readable class.\n\nfunction Stream() {\n  EE.call(this);\n}\n\nStream.prototype.pipe = function(dest, options) {\n  var source = this;\n\n  function ondata(chunk) {\n    if (dest.writable) {\n      if (false === dest.write(chunk) && source.pause) {\n        source.pause();\n      }\n    }\n  }\n\n  source.on('data', ondata);\n\n  function ondrain() {\n    if (source.readable && source.resume) {\n      source.resume();\n    }\n  }\n\n  dest.on('drain', ondrain);\n\n  // If the 'end' option is not supplied, dest.end() will be called when\n  // source gets the 'end' or 'close' events.  Only dest.end() once.\n  if (!dest._isStdio && (!options || options.end !== false)) {\n    source.on('end', onend);\n    source.on('close', onclose);\n  }\n\n  var didOnEnd = false;\n  function onend() {\n    if (didOnEnd) return;\n    didOnEnd = true;\n\n    dest.end();\n  }\n\n\n  function onclose() {\n    if (didOnEnd) return;\n    didOnEnd = true;\n\n    if (typeof dest.destroy === 'function') dest.destroy();\n  }\n\n  // don't leave dangling pipes when there are errors.\n  function onerror(er) {\n    cleanup();\n    if (EE.listenerCount(this, 'error') === 0) {\n      throw er; // Unhandled stream error in pipe.\n    }\n  }\n\n  source.on('error', onerror);\n  dest.on('error', onerror);\n\n  // remove all the event listeners that were added.\n  function cleanup() {\n    source.removeListener('data', ondata);\n    dest.removeListener('drain', ondrain);\n\n    source.removeListener('end', onend);\n    source.removeListener('close', onclose);\n\n    source.removeListener('error', onerror);\n    dest.removeListener('error', onerror);\n\n    source.removeListener('end', cleanup);\n    source.removeListener('close', cleanup);\n\n    dest.removeListener('close', cleanup);\n  }\n\n  source.on('end', cleanup);\n  source.on('close', cleanup);\n\n  dest.on('close', cleanup);\n\n  dest.emit('pipe', source);\n\n  // Allow for unix-like usage: A.pipe(B).pipe(C)\n  return dest;\n};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\n\nfunction isArray(arg) {\n  if (Array.isArray) {\n    return Array.isArray(arg);\n  }\n  return objectToString(arg) === '[object Array]';\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = Buffer.isBuffer;\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n","'use strict';\n\nif (!process.version ||\n    process.version.indexOf('v0.') === 0 ||\n    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {\n  module.exports = { nextTick: nextTick };\n} else {\n  module.exports = process\n}\n\nfunction nextTick(fn, arg1, arg2, arg3) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('\"callback\" argument must be a function');\n  }\n  var len = arguments.length;\n  var args, i;\n  switch (len) {\n  case 0:\n  case 1:\n    return process.nextTick(fn);\n  case 2:\n    return process.nextTick(function afterTickOne() {\n      fn.call(null, arg1);\n    });\n  case 3:\n    return process.nextTick(function afterTickTwo() {\n      fn.call(null, arg1, arg2);\n    });\n  case 4:\n    return process.nextTick(function afterTickThree() {\n      fn.call(null, arg1, arg2, arg3);\n    });\n  default:\n    args = new Array(len - 1);\n    i = 0;\n    while (i < args.length) {\n      args[i++] = arguments[i];\n    }\n    return process.nextTick(function afterTick() {\n      fn.apply(null, args);\n    });\n  }\n}\n\n","exports = module.exports = require('./lib/_stream_readable.js');\nexports.Stream = exports;\nexports.Readable = exports;\nexports.Writable = require('./lib/_stream_writable.js');\nexports.Duplex = require('./lib/_stream_duplex.js');\nexports.Transform = require('./lib/_stream_transform.js');\nexports.PassThrough = require('./lib/_stream_passthrough.js');\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\n// the drain event emission and buffering.\n\n'use strict';\n\n/*<replacement>*/\n\nvar pna = require('process-nextick-args');\n/*</replacement>*/\n\nmodule.exports = Writable;\n\n/* <replacement> */\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n  this.next = null;\n}\n\n// It seems a linked list but it is not\n// there will be only 2 of these for each stream\nfunction CorkedRequest(state) {\n  var _this = this;\n\n  this.next = null;\n  this.entry = null;\n  this.finish = function () {\n    onCorkedFinish(_this, state);\n  };\n}\n/* </replacement> */\n\n/*<replacement>*/\nvar asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;\n/*</replacement>*/\n\n/*<replacement>*/\nvar Duplex;\n/*</replacement>*/\n\nWritable.WritableState = WritableState;\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\n/*<replacement>*/\nvar internalUtil = {\n  deprecate: require('util-deprecate')\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar Buffer = require('safe-buffer').Buffer;\nvar OurUint8Array = global.Uint8Array || function () {};\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n\n/*</replacement>*/\n\nvar destroyImpl = require('./internal/streams/destroy');\n\nutil.inherits(Writable, Stream);\n\nfunction nop() {}\n\nfunction WritableState(options, stream) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  options = options || {};\n\n  // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n  var isDuplex = stream instanceof Duplex;\n\n  // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n  this.objectMode = !!options.objectMode;\n\n  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;\n\n  // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n  var hwm = options.highWaterMark;\n  var writableHwm = options.writableHighWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n\n  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = Math.floor(this.highWaterMark);\n\n  // if _final has been called\n  this.finalCalled = false;\n\n  // drain event flag.\n  this.needDrain = false;\n  // at the start of calling end()\n  this.ending = false;\n  // when end() has been called, and returned\n  this.ended = false;\n  // when 'finish' is emitted\n  this.finished = false;\n\n  // has it been destroyed\n  this.destroyed = false;\n\n  // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n  this.length = 0;\n\n  // a flag to see when we're in the middle of a write.\n  this.writing = false;\n\n  // when true all writes will be buffered until .uncork() call\n  this.corked = 0;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n  this.bufferProcessing = false;\n\n  // the callback that's passed to _write(chunk,cb)\n  this.onwrite = function (er) {\n    onwrite(stream, er);\n  };\n\n  // the callback that the user supplies to write(chunk,encoding,cb)\n  this.writecb = null;\n\n  // the amount that is being written when _write is called.\n  this.writelen = 0;\n\n  this.bufferedRequest = null;\n  this.lastBufferedRequest = null;\n\n  // number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted\n  this.pendingcb = 0;\n\n  // emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams\n  this.prefinished = false;\n\n  // True if the error was already emitted and should not be thrown again\n  this.errorEmitted = false;\n\n  // count buffered requests\n  this.bufferedRequestCount = 0;\n\n  // allocate the first CorkedRequest, there is always\n  // one allocated and free to use, and we maintain at most two\n  this.corkedRequestsFree = new CorkedRequest(this);\n}\n\nWritableState.prototype.getBuffer = function getBuffer() {\n  var current = this.bufferedRequest;\n  var out = [];\n  while (current) {\n    out.push(current);\n    current = current.next;\n  }\n  return out;\n};\n\n(function () {\n  try {\n    Object.defineProperty(WritableState.prototype, 'buffer', {\n      get: internalUtil.deprecate(function () {\n        return this.getBuffer();\n      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')\n    });\n  } catch (_) {}\n})();\n\n// Test _writableState for inheritance to account for Duplex streams,\n// whose prototype chain only points to Readable.\nvar realHasInstance;\nif (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {\n  realHasInstance = Function.prototype[Symbol.hasInstance];\n  Object.defineProperty(Writable, Symbol.hasInstance, {\n    value: function (object) {\n      if (realHasInstance.call(this, object)) return true;\n      if (this !== Writable) return false;\n\n      return object && object._writableState instanceof WritableState;\n    }\n  });\n} else {\n  realHasInstance = function (object) {\n    return object instanceof this;\n  };\n}\n\nfunction Writable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  // Writable ctor is applied to Duplexes, too.\n  // `realHasInstance` is necessary because using plain `instanceof`\n  // would return false, as no `_writableState` property is attached.\n\n  // Trying to use the custom `instanceof` for Writable here will also break the\n  // Node.js LazyTransform implementation, which has a non-trivial getter for\n  // `_writableState` that would lead to infinite recursion.\n  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {\n    return new Writable(options);\n  }\n\n  this._writableState = new WritableState(options, this);\n\n  // legacy.\n  this.writable = true;\n\n  if (options) {\n    if (typeof options.write === 'function') this._write = options.write;\n\n    if (typeof options.writev === 'function') this._writev = options.writev;\n\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n\n    if (typeof options.final === 'function') this._final = options.final;\n  }\n\n  Stream.call(this);\n}\n\n// Otherwise people can pipe Writable streams, which is just wrong.\nWritable.prototype.pipe = function () {\n  this.emit('error', new Error('Cannot pipe, not readable'));\n};\n\nfunction writeAfterEnd(stream, cb) {\n  var er = new Error('write after end');\n  // TODO: defer error events consistently everywhere, not just the cb\n  stream.emit('error', er);\n  pna.nextTick(cb, er);\n}\n\n// Checks that a user-supplied chunk is valid, especially for the particular\n// mode the stream is in. Currently this means that `null` is never accepted\n// and undefined/non-string values are only allowed in object mode.\nfunction validChunk(stream, state, chunk, cb) {\n  var valid = true;\n  var er = false;\n\n  if (chunk === null) {\n    er = new TypeError('May not write null values to stream');\n  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  if (er) {\n    stream.emit('error', er);\n    pna.nextTick(cb, er);\n    valid = false;\n  }\n  return valid;\n}\n\nWritable.prototype.write = function (chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n  var isBuf = !state.objectMode && _isUint8Array(chunk);\n\n  if (isBuf && !Buffer.isBuffer(chunk)) {\n    chunk = _uint8ArrayToBuffer(chunk);\n  }\n\n  if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;\n\n  if (typeof cb !== 'function') cb = nop;\n\n  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {\n    state.pendingcb++;\n    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);\n  }\n\n  return ret;\n};\n\nWritable.prototype.cork = function () {\n  var state = this._writableState;\n\n  state.corked++;\n};\n\nWritable.prototype.uncork = function () {\n  var state = this._writableState;\n\n  if (state.corked) {\n    state.corked--;\n\n    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);\n  }\n};\n\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n  // node::ParseEncoding() requires lower case.\n  if (typeof encoding === 'string') encoding = encoding.toLowerCase();\n  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);\n  this._writableState.defaultEncoding = encoding;\n  return this;\n};\n\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {\n    chunk = Buffer.from(chunk, encoding);\n  }\n  return chunk;\n}\n\nObject.defineProperty(Writable.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function () {\n    return this._writableState.highWaterMark;\n  }\n});\n\n// if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\nfunction writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {\n  if (!isBuf) {\n    var newChunk = decodeChunk(state, chunk, encoding);\n    if (chunk !== newChunk) {\n      isBuf = true;\n      encoding = 'buffer';\n      chunk = newChunk;\n    }\n  }\n  var len = state.objectMode ? 1 : chunk.length;\n\n  state.length += len;\n\n  var ret = state.length < state.highWaterMark;\n  // we must ensure that previous needDrain will not be reset to false.\n  if (!ret) state.needDrain = true;\n\n  if (state.writing || state.corked) {\n    var last = state.lastBufferedRequest;\n    state.lastBufferedRequest = {\n      chunk: chunk,\n      encoding: encoding,\n      isBuf: isBuf,\n      callback: cb,\n      next: null\n    };\n    if (last) {\n      last.next = state.lastBufferedRequest;\n    } else {\n      state.bufferedRequest = state.lastBufferedRequest;\n    }\n    state.bufferedRequestCount += 1;\n  } else {\n    doWrite(stream, state, false, len, chunk, encoding, cb);\n  }\n\n  return ret;\n}\n\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\n\nfunction onwriteError(stream, state, sync, er, cb) {\n  --state.pendingcb;\n\n  if (sync) {\n    // defer the callback if we are being called synchronously\n    // to avoid piling up things on the stack\n    pna.nextTick(cb, er);\n    // this can emit finish, and it will always happen\n    // after error\n    pna.nextTick(finishMaybe, stream, state);\n    stream._writableState.errorEmitted = true;\n    stream.emit('error', er);\n  } else {\n    // the caller expect this to happen before if\n    // it is async\n    cb(er);\n    stream._writableState.errorEmitted = true;\n    stream.emit('error', er);\n    // this can emit finish, but finish must\n    // always follow error\n    finishMaybe(stream, state);\n  }\n}\n\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\n\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n\n  onwriteStateUpdate(state);\n\n  if (er) onwriteError(stream, state, sync, er, cb);else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = needFinish(state);\n\n    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\n      clearBuffer(stream, state);\n    }\n\n    if (sync) {\n      /*<replacement>*/\n      asyncWrite(afterWrite, stream, state, finished, cb);\n      /*</replacement>*/\n    } else {\n      afterWrite(stream, state, finished, cb);\n    }\n  }\n}\n\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished) onwriteDrain(stream, state);\n  state.pendingcb--;\n  cb();\n  finishMaybe(stream, state);\n}\n\n// Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n}\n\n// if there's something in the buffer waiting, then process it\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n  var entry = state.bufferedRequest;\n\n  if (stream._writev && entry && entry.next) {\n    // Fast case, write everything using _writev()\n    var l = state.bufferedRequestCount;\n    var buffer = new Array(l);\n    var holder = state.corkedRequestsFree;\n    holder.entry = entry;\n\n    var count = 0;\n    var allBuffers = true;\n    while (entry) {\n      buffer[count] = entry;\n      if (!entry.isBuf) allBuffers = false;\n      entry = entry.next;\n      count += 1;\n    }\n    buffer.allBuffers = allBuffers;\n\n    doWrite(stream, state, true, state.length, buffer, '', holder.finish);\n\n    // doWrite is almost always async, defer these to save a bit of time\n    // as the hot path ends with doWrite\n    state.pendingcb++;\n    state.lastBufferedRequest = null;\n    if (holder.next) {\n      state.corkedRequestsFree = holder.next;\n      holder.next = null;\n    } else {\n      state.corkedRequestsFree = new CorkedRequest(state);\n    }\n    state.bufferedRequestCount = 0;\n  } else {\n    // Slow case, write chunks one-by-one\n    while (entry) {\n      var chunk = entry.chunk;\n      var encoding = entry.encoding;\n      var cb = entry.callback;\n      var len = state.objectMode ? 1 : chunk.length;\n\n      doWrite(stream, state, false, len, chunk, encoding, cb);\n      entry = entry.next;\n      state.bufferedRequestCount--;\n      // if we didn't call the onwrite immediately, then\n      // it means that we need to wait until it does.\n      // also, that means that the chunk and cb are currently\n      // being processed, so move the buffer counter past them.\n      if (state.writing) {\n        break;\n      }\n    }\n\n    if (entry === null) state.lastBufferedRequest = null;\n  }\n\n  state.bufferedRequest = entry;\n  state.bufferProcessing = false;\n}\n\nWritable.prototype._write = function (chunk, encoding, cb) {\n  cb(new Error('_write() is not implemented'));\n};\n\nWritable.prototype._writev = null;\n\nWritable.prototype.end = function (chunk, encoding, cb) {\n  var state = this._writableState;\n\n  if (typeof chunk === 'function') {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);\n\n  // .end() fully uncorks\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  }\n\n  // ignore unnecessary end() calls.\n  if (!state.ending && !state.finished) endWritable(this, state, cb);\n};\n\nfunction needFinish(state) {\n  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\n}\nfunction callFinal(stream, state) {\n  stream._final(function (err) {\n    state.pendingcb--;\n    if (err) {\n      stream.emit('error', err);\n    }\n    state.prefinished = true;\n    stream.emit('prefinish');\n    finishMaybe(stream, state);\n  });\n}\nfunction prefinish(stream, state) {\n  if (!state.prefinished && !state.finalCalled) {\n    if (typeof stream._final === 'function') {\n      state.pendingcb++;\n      state.finalCalled = true;\n      pna.nextTick(callFinal, stream, state);\n    } else {\n      state.prefinished = true;\n      stream.emit('prefinish');\n    }\n  }\n}\n\nfunction finishMaybe(stream, state) {\n  var need = needFinish(state);\n  if (need) {\n    prefinish(stream, state);\n    if (state.pendingcb === 0) {\n      state.finished = true;\n      stream.emit('finish');\n    }\n  }\n  return need;\n}\n\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n  if (cb) {\n    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);\n  }\n  state.ended = true;\n  stream.writable = false;\n}\n\nfunction onCorkedFinish(corkReq, state, err) {\n  var entry = corkReq.entry;\n  corkReq.entry = null;\n  while (entry) {\n    var cb = entry.callback;\n    state.pendingcb--;\n    cb(err);\n    entry = entry.next;\n  }\n  if (state.corkedRequestsFree) {\n    state.corkedRequestsFree.next = corkReq;\n  } else {\n    state.corkedRequestsFree = corkReq;\n  }\n}\n\nObject.defineProperty(Writable.prototype, 'destroyed', {\n  get: function () {\n    if (this._writableState === undefined) {\n      return false;\n    }\n    return this._writableState.destroyed;\n  },\n  set: function (value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._writableState) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._writableState.destroyed = value;\n  }\n});\n\nWritable.prototype.destroy = destroyImpl.destroy;\nWritable.prototype._undestroy = destroyImpl.undestroy;\nWritable.prototype._destroy = function (err, cb) {\n  this.end();\n  cb(err);\n};","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n/*<replacement>*/\n\nvar pna = require('process-nextick-args');\n/*</replacement>*/\n\nmodule.exports = Readable;\n\n/*<replacement>*/\nvar isArray = require('isarray');\n/*</replacement>*/\n\n/*<replacement>*/\nvar Duplex;\n/*</replacement>*/\n\nReadable.ReadableState = ReadableState;\n\n/*<replacement>*/\nvar EE = require('events').EventEmitter;\n\nvar EElistenerCount = function (emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar Buffer = require('safe-buffer').Buffer;\nvar OurUint8Array = global.Uint8Array || function () {};\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n\n/*</replacement>*/\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\n/*<replacement>*/\nvar debugUtil = require('util');\nvar debug = void 0;\nif (debugUtil && debugUtil.debuglog) {\n  debug = debugUtil.debuglog('stream');\n} else {\n  debug = function () {};\n}\n/*</replacement>*/\n\nvar BufferList = require('./internal/streams/BufferList');\nvar destroyImpl = require('./internal/streams/destroy');\nvar StringDecoder;\n\nutil.inherits(Readable, Stream);\n\nvar kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];\n\nfunction prependListener(emitter, event, fn) {\n  // Sadly this is not cacheable as some libraries bundle their own\n  // event emitter implementation with them.\n  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);\n\n  // This is a hack to make sure that our error handler is attached before any\n  // userland ones.  NEVER DO THIS. This is here only because this code needs\n  // to continue to work with older versions of Node.js that do not include\n  // the prependListener() method. The goal is to eventually remove this hack.\n  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];\n}\n\nfunction ReadableState(options, stream) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  options = options || {};\n\n  // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n  var isDuplex = stream instanceof Duplex;\n\n  // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n  this.objectMode = !!options.objectMode;\n\n  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;\n\n  // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n  var hwm = options.highWaterMark;\n  var readableHwm = options.readableHighWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n\n  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = Math.floor(this.highWaterMark);\n\n  // A linked list is used to store data chunks instead of an array because the\n  // linked list can remove elements from the beginning faster than\n  // array.shift()\n  this.buffer = new BufferList();\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false;\n\n  // a flag to be able to tell if the event 'readable'/'data' is emitted\n  // immediately, or on a later tick.  We set this to true at first, because\n  // any actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first read call.\n  this.sync = true;\n\n  // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n  this.resumeScheduled = false;\n\n  // has it been destroyed\n  this.destroyed = false;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // the number of writers that are awaiting a drain event in .pipe()s\n  this.awaitDrain = 0;\n\n  // if true, a maybeReadMore has been scheduled\n  this.readingMore = false;\n\n  this.decoder = null;\n  this.encoding = null;\n  if (options.encoding) {\n    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\n\nfunction Readable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  if (!(this instanceof Readable)) return new Readable(options);\n\n  this._readableState = new ReadableState(options, this);\n\n  // legacy\n  this.readable = true;\n\n  if (options) {\n    if (typeof options.read === 'function') this._read = options.read;\n\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n  }\n\n  Stream.call(this);\n}\n\nObject.defineProperty(Readable.prototype, 'destroyed', {\n  get: function () {\n    if (this._readableState === undefined) {\n      return false;\n    }\n    return this._readableState.destroyed;\n  },\n  set: function (value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._readableState) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._readableState.destroyed = value;\n  }\n});\n\nReadable.prototype.destroy = destroyImpl.destroy;\nReadable.prototype._undestroy = destroyImpl.undestroy;\nReadable.prototype._destroy = function (err, cb) {\n  this.push(null);\n  cb(err);\n};\n\n// Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\nReadable.prototype.push = function (chunk, encoding) {\n  var state = this._readableState;\n  var skipChunkCheck;\n\n  if (!state.objectMode) {\n    if (typeof chunk === 'string') {\n      encoding = encoding || state.defaultEncoding;\n      if (encoding !== state.encoding) {\n        chunk = Buffer.from(chunk, encoding);\n        encoding = '';\n      }\n      skipChunkCheck = true;\n    }\n  } else {\n    skipChunkCheck = true;\n  }\n\n  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);\n};\n\n// Unshift should *always* be something directly out of read()\nReadable.prototype.unshift = function (chunk) {\n  return readableAddChunk(this, chunk, null, true, false);\n};\n\nfunction readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {\n  var state = stream._readableState;\n  if (chunk === null) {\n    state.reading = false;\n    onEofChunk(stream, state);\n  } else {\n    var er;\n    if (!skipChunkCheck) er = chunkInvalid(state, chunk);\n    if (er) {\n      stream.emit('error', er);\n    } else if (state.objectMode || chunk && chunk.length > 0) {\n      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {\n        chunk = _uint8ArrayToBuffer(chunk);\n      }\n\n      if (addToFront) {\n        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);\n      } else if (state.ended) {\n        stream.emit('error', new Error('stream.push() after EOF'));\n      } else {\n        state.reading = false;\n        if (state.decoder && !encoding) {\n          chunk = state.decoder.write(chunk);\n          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);\n        } else {\n          addChunk(stream, state, chunk, false);\n        }\n      }\n    } else if (!addToFront) {\n      state.reading = false;\n    }\n  }\n\n  return needMoreData(state);\n}\n\nfunction addChunk(stream, state, chunk, addToFront) {\n  if (state.flowing && state.length === 0 && !state.sync) {\n    stream.emit('data', chunk);\n    stream.read(0);\n  } else {\n    // update the buffer info.\n    state.length += state.objectMode ? 1 : chunk.length;\n    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);\n\n    if (state.needReadable) emitReadable(stream);\n  }\n  maybeReadMore(stream, state);\n}\n\nfunction chunkInvalid(state, chunk) {\n  var er;\n  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  return er;\n}\n\n// if it's past the high water mark, we can push in some more.\n// Also, if we have no data yet, we can stand some\n// more bytes.  This is to work around cases where hwm=0,\n// such as the repl.  Also, if the push() triggered a\n// readable event, and the user called read(largeNumber) such that\n// needReadable was set, then we ought to push more, so that another\n// 'readable' event will be triggered.\nfunction needMoreData(state) {\n  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);\n}\n\nReadable.prototype.isPaused = function () {\n  return this._readableState.flowing === false;\n};\n\n// backwards compatibility.\nReadable.prototype.setEncoding = function (enc) {\n  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n  this._readableState.decoder = new StringDecoder(enc);\n  this._readableState.encoding = enc;\n  return this;\n};\n\n// Don't raise the hwm > 8MB\nvar MAX_HWM = 0x800000;\nfunction computeNewHighWaterMark(n) {\n  if (n >= MAX_HWM) {\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2 to prevent increasing hwm excessively in\n    // tiny amounts\n    n--;\n    n |= n >>> 1;\n    n |= n >>> 2;\n    n |= n >>> 4;\n    n |= n >>> 8;\n    n |= n >>> 16;\n    n++;\n  }\n  return n;\n}\n\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction howMuchToRead(n, state) {\n  if (n <= 0 || state.length === 0 && state.ended) return 0;\n  if (state.objectMode) return 1;\n  if (n !== n) {\n    // Only flow one buffer at a time\n    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;\n  }\n  // If we're asking for more than the current hwm, then raise the hwm.\n  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);\n  if (n <= state.length) return n;\n  // Don't have enough\n  if (!state.ended) {\n    state.needReadable = true;\n    return 0;\n  }\n  return state.length;\n}\n\n// you can override either this method, or the async _read(n) below.\nReadable.prototype.read = function (n) {\n  debug('read', n);\n  n = parseInt(n, 10);\n  var state = this._readableState;\n  var nOrig = n;\n\n  if (n !== 0) state.emittedReadable = false;\n\n  // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {\n    debug('read: emitReadable', state.length, state.ended);\n    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);\n    return null;\n  }\n\n  n = howMuchToRead(n, state);\n\n  // if we've ended, and we're now clear, then finish it up.\n  if (n === 0 && state.ended) {\n    if (state.length === 0) endReadable(this);\n    return null;\n  }\n\n  // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n\n  // if we need a readable event, then we need to do some reading.\n  var doRead = state.needReadable;\n  debug('need readable', doRead);\n\n  // if we currently have less than the highWaterMark, then also read some\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n    debug('length less than watermark', doRead);\n  }\n\n  // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n  if (state.ended || state.reading) {\n    doRead = false;\n    debug('reading or ended', doRead);\n  } else if (doRead) {\n    debug('do read');\n    state.reading = true;\n    state.sync = true;\n    // if the length is currently zero, then we *need* a readable event.\n    if (state.length === 0) state.needReadable = true;\n    // call internal read method\n    this._read(state.highWaterMark);\n    state.sync = false;\n    // If _read pushed data synchronously, then `reading` will be false,\n    // and we need to re-evaluate how much data we can return to the user.\n    if (!state.reading) n = howMuchToRead(nOrig, state);\n  }\n\n  var ret;\n  if (n > 0) ret = fromList(n, state);else ret = null;\n\n  if (ret === null) {\n    state.needReadable = true;\n    n = 0;\n  } else {\n    state.length -= n;\n  }\n\n  if (state.length === 0) {\n    // If we have nothing in the buffer, then we want to know\n    // as soon as we *do* get something into the buffer.\n    if (!state.ended) state.needReadable = true;\n\n    // If we tried to read() past the EOF, then emit end on the next tick.\n    if (nOrig !== n && state.ended) endReadable(this);\n  }\n\n  if (ret !== null) this.emit('data', ret);\n\n  return ret;\n};\n\nfunction onEofChunk(stream, state) {\n  if (state.ended) return;\n  if (state.decoder) {\n    var chunk = state.decoder.end();\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n  state.ended = true;\n\n  // emit 'readable' now to make sure it gets picked up.\n  emitReadable(stream);\n}\n\n// Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  state.needReadable = false;\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing);\n    state.emittedReadable = true;\n    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);\n  }\n}\n\nfunction emitReadable_(stream) {\n  debug('emit readable');\n  stream.emit('readable');\n  flow(stream);\n}\n\n// at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    pna.nextTick(maybeReadMore_, stream, state);\n  }\n}\n\nfunction maybeReadMore_(stream, state) {\n  var len = state.length;\n  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {\n    debug('maybeReadMore read 0');\n    stream.read(0);\n    if (len === state.length)\n      // didn't get any data, stop spinning.\n      break;else len = state.length;\n  }\n  state.readingMore = false;\n}\n\n// abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\nReadable.prototype._read = function (n) {\n  this.emit('error', new Error('_read() is not implemented'));\n};\n\nReadable.prototype.pipe = function (dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n  state.pipesCount += 1;\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n\n  var endFn = doEnd ? onend : unpipe;\n  if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);\n\n  dest.on('unpipe', onunpipe);\n  function onunpipe(readable, unpipeInfo) {\n    debug('onunpipe');\n    if (readable === src) {\n      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {\n        unpipeInfo.hasUnpiped = true;\n        cleanup();\n      }\n    }\n  }\n\n  function onend() {\n    debug('onend');\n    dest.end();\n  }\n\n  // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n\n  var cleanedUp = false;\n  function cleanup() {\n    debug('cleanup');\n    // cleanup event handlers once the pipe is broken\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', unpipe);\n    src.removeListener('data', ondata);\n\n    cleanedUp = true;\n\n    // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n  }\n\n  // If the user pushes more data while we're writing to dest then we'll end up\n  // in ondata again. However, we only want to increase awaitDrain once because\n  // dest will only emit one 'drain' event for the multiple writes.\n  // => Introduce a guard on increasing awaitDrain.\n  var increasedAwaitDrain = false;\n  src.on('data', ondata);\n  function ondata(chunk) {\n    debug('ondata');\n    increasedAwaitDrain = false;\n    var ret = dest.write(chunk);\n    if (false === ret && !increasedAwaitDrain) {\n      // If the user unpiped during `dest.write()`, it is possible\n      // to get stuck in a permanently paused state if that write\n      // also returned false.\n      // => Check whether `dest` is still a piping destination.\n      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {\n        debug('false write response, pause', src._readableState.awaitDrain);\n        src._readableState.awaitDrain++;\n        increasedAwaitDrain = true;\n      }\n      src.pause();\n    }\n  }\n\n  // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n  function onerror(er) {\n    debug('onerror', er);\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);\n  }\n\n  // Make sure our error handler is attached before userland ones.\n  prependListener(dest, 'error', onerror);\n\n  // Both close and finish should trigger unpipe, but only once.\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n  dest.once('close', onclose);\n  function onfinish() {\n    debug('onfinish');\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n  dest.once('finish', onfinish);\n\n  function unpipe() {\n    debug('unpipe');\n    src.unpipe(dest);\n  }\n\n  // tell the dest that it's being piped to\n  dest.emit('pipe', src);\n\n  // start the flow if it hasn't been started already.\n  if (!state.flowing) {\n    debug('pipe resume');\n    src.resume();\n  }\n\n  return dest;\n};\n\nfunction pipeOnDrain(src) {\n  return function () {\n    var state = src._readableState;\n    debug('pipeOnDrain', state.awaitDrain);\n    if (state.awaitDrain) state.awaitDrain--;\n    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {\n      state.flowing = true;\n      flow(src);\n    }\n  };\n}\n\nReadable.prototype.unpipe = function (dest) {\n  var state = this._readableState;\n  var unpipeInfo = { hasUnpiped: false };\n\n  // if we're not piping anywhere, then do nothing.\n  if (state.pipesCount === 0) return this;\n\n  // just one destination.  most common case.\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes) return this;\n\n    if (!dest) dest = state.pipes;\n\n    // got a match.\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest) dest.emit('unpipe', this, unpipeInfo);\n    return this;\n  }\n\n  // slow case. multiple pipe destinations.\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n\n    for (var i = 0; i < len; i++) {\n      dests[i].emit('unpipe', this, unpipeInfo);\n    }return this;\n  }\n\n  // try to find the right one.\n  var index = indexOf(state.pipes, dest);\n  if (index === -1) return this;\n\n  state.pipes.splice(index, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1) state.pipes = state.pipes[0];\n\n  dest.emit('unpipe', this, unpipeInfo);\n\n  return this;\n};\n\n// set up data events if they are asked for\n// Ensure readable listeners eventually get something\nReadable.prototype.on = function (ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n\n  if (ev === 'data') {\n    // Start flowing on next tick if stream isn't explicitly paused\n    if (this._readableState.flowing !== false) this.resume();\n  } else if (ev === 'readable') {\n    var state = this._readableState;\n    if (!state.endEmitted && !state.readableListening) {\n      state.readableListening = state.needReadable = true;\n      state.emittedReadable = false;\n      if (!state.reading) {\n        pna.nextTick(nReadingNextTick, this);\n      } else if (state.length) {\n        emitReadable(this);\n      }\n    }\n  }\n\n  return res;\n};\nReadable.prototype.addListener = Readable.prototype.on;\n\nfunction nReadingNextTick(self) {\n  debug('readable nexttick read 0');\n  self.read(0);\n}\n\n// pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\nReadable.prototype.resume = function () {\n  var state = this._readableState;\n  if (!state.flowing) {\n    debug('resume');\n    state.flowing = true;\n    resume(this, state);\n  }\n  return this;\n};\n\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    pna.nextTick(resume_, stream, state);\n  }\n}\n\nfunction resume_(stream, state) {\n  if (!state.reading) {\n    debug('resume read 0');\n    stream.read(0);\n  }\n\n  state.resumeScheduled = false;\n  state.awaitDrain = 0;\n  stream.emit('resume');\n  flow(stream);\n  if (state.flowing && !state.reading) stream.read(0);\n}\n\nReadable.prototype.pause = function () {\n  debug('call pause flowing=%j', this._readableState.flowing);\n  if (false !== this._readableState.flowing) {\n    debug('pause');\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n  return this;\n};\n\nfunction flow(stream) {\n  var state = stream._readableState;\n  debug('flow', state.flowing);\n  while (state.flowing && stream.read() !== null) {}\n}\n\n// wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\nReadable.prototype.wrap = function (stream) {\n  var _this = this;\n\n  var state = this._readableState;\n  var paused = false;\n\n  stream.on('end', function () {\n    debug('wrapped end');\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length) _this.push(chunk);\n    }\n\n    _this.push(null);\n  });\n\n  stream.on('data', function (chunk) {\n    debug('wrapped data');\n    if (state.decoder) chunk = state.decoder.write(chunk);\n\n    // don't skip over falsy values in objectMode\n    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;\n\n    var ret = _this.push(chunk);\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  });\n\n  // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n  for (var i in stream) {\n    if (this[i] === undefined && typeof stream[i] === 'function') {\n      this[i] = function (method) {\n        return function () {\n          return stream[method].apply(stream, arguments);\n        };\n      }(i);\n    }\n  }\n\n  // proxy certain important events.\n  for (var n = 0; n < kProxyEvents.length; n++) {\n    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));\n  }\n\n  // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n  this._read = function (n) {\n    debug('wrapped _read', n);\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n\n  return this;\n};\n\nObject.defineProperty(Readable.prototype, 'readableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function () {\n    return this._readableState.highWaterMark;\n  }\n});\n\n// exposed for testing purposes only.\nReadable._fromList = fromList;\n\n// Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromList(n, state) {\n  // nothing buffered\n  if (state.length === 0) return null;\n\n  var ret;\n  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {\n    // read it all, truncate the list\n    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);\n    state.buffer.clear();\n  } else {\n    // read part of list\n    ret = fromListPartial(n, state.buffer, state.decoder);\n  }\n\n  return ret;\n}\n\n// Extracts only enough buffered data to satisfy the amount requested.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromListPartial(n, list, hasStrings) {\n  var ret;\n  if (n < list.head.data.length) {\n    // slice is the same for buffers and strings\n    ret = list.head.data.slice(0, n);\n    list.head.data = list.head.data.slice(n);\n  } else if (n === list.head.data.length) {\n    // first chunk is a perfect match\n    ret = list.shift();\n  } else {\n    // result spans more than one buffer\n    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);\n  }\n  return ret;\n}\n\n// Copies a specified amount of characters from the list of buffered data\n// chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction copyFromBufferString(n, list) {\n  var p = list.head;\n  var c = 1;\n  var ret = p.data;\n  n -= ret.length;\n  while (p = p.next) {\n    var str = p.data;\n    var nb = n > str.length ? str.length : n;\n    if (nb === str.length) ret += str;else ret += str.slice(0, n);\n    n -= nb;\n    if (n === 0) {\n      if (nb === str.length) {\n        ++c;\n        if (p.next) list.head = p.next;else list.head = list.tail = null;\n      } else {\n        list.head = p;\n        p.data = str.slice(nb);\n      }\n      break;\n    }\n    ++c;\n  }\n  list.length -= c;\n  return ret;\n}\n\n// Copies a specified amount of bytes from the list of buffered data chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction copyFromBuffer(n, list) {\n  var ret = Buffer.allocUnsafe(n);\n  var p = list.head;\n  var c = 1;\n  p.data.copy(ret);\n  n -= p.data.length;\n  while (p = p.next) {\n    var buf = p.data;\n    var nb = n > buf.length ? buf.length : n;\n    buf.copy(ret, ret.length - n, 0, nb);\n    n -= nb;\n    if (n === 0) {\n      if (nb === buf.length) {\n        ++c;\n        if (p.next) list.head = p.next;else list.head = list.tail = null;\n      } else {\n        list.head = p;\n        p.data = buf.slice(nb);\n      }\n      break;\n    }\n    ++c;\n  }\n  list.length -= c;\n  return ret;\n}\n\nfunction endReadable(stream) {\n  var state = stream._readableState;\n\n  // If we get here before consuming all the bytes, then that is a\n  // bug in node.  Should never happen.\n  if (state.length > 0) throw new Error('\"endReadable()\" called on non-empty stream');\n\n  if (!state.endEmitted) {\n    state.ended = true;\n    pna.nextTick(endReadableNT, state, stream);\n  }\n}\n\nfunction endReadableNT(state, stream) {\n  // Check that we didn't get one last unshift.\n  if (!state.endEmitted && state.length === 0) {\n    state.endEmitted = true;\n    stream.readable = false;\n    stream.emit('end');\n  }\n}\n\nfunction indexOf(xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n  return -1;\n}","module.exports = require('events').EventEmitter;\n","'use strict';\n\n/*<replacement>*/\n\nvar pna = require('process-nextick-args');\n/*</replacement>*/\n\n// undocumented cb() API, needed for core, not for public API\nfunction destroy(err, cb) {\n  var _this = this;\n\n  var readableDestroyed = this._readableState && this._readableState.destroyed;\n  var writableDestroyed = this._writableState && this._writableState.destroyed;\n\n  if (readableDestroyed || writableDestroyed) {\n    if (cb) {\n      cb(err);\n    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {\n      pna.nextTick(emitErrorNT, this, err);\n    }\n    return this;\n  }\n\n  // we set destroyed to true before firing error callbacks in order\n  // to make it re-entrance safe in case destroy() is called within callbacks\n\n  if (this._readableState) {\n    this._readableState.destroyed = true;\n  }\n\n  // if this is a duplex stream mark the writable part as destroyed as well\n  if (this._writableState) {\n    this._writableState.destroyed = true;\n  }\n\n  this._destroy(err || null, function (err) {\n    if (!cb && err) {\n      pna.nextTick(emitErrorNT, _this, err);\n      if (_this._writableState) {\n        _this._writableState.errorEmitted = true;\n      }\n    } else if (cb) {\n      cb(err);\n    }\n  });\n\n  return this;\n}\n\nfunction undestroy() {\n  if (this._readableState) {\n    this._readableState.destroyed = false;\n    this._readableState.reading = false;\n    this._readableState.ended = false;\n    this._readableState.endEmitted = false;\n  }\n\n  if (this._writableState) {\n    this._writableState.destroyed = false;\n    this._writableState.ended = false;\n    this._writableState.ending = false;\n    this._writableState.finished = false;\n    this._writableState.errorEmitted = false;\n  }\n}\n\nfunction emitErrorNT(self, err) {\n  self.emit('error', err);\n}\n\nmodule.exports = {\n  destroy: destroy,\n  undestroy: undestroy\n};","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n\n'use strict';\n\nmodule.exports = Transform;\n\nvar Duplex = require('./_stream_duplex');\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nutil.inherits(Transform, Duplex);\n\nfunction afterTransform(er, data) {\n  var ts = this._transformState;\n  ts.transforming = false;\n\n  var cb = ts.writecb;\n\n  if (!cb) {\n    return this.emit('error', new Error('write callback called multiple times'));\n  }\n\n  ts.writechunk = null;\n  ts.writecb = null;\n\n  if (data != null) // single equals check for both `null` and `undefined`\n    this.push(data);\n\n  cb(er);\n\n  var rs = this._readableState;\n  rs.reading = false;\n  if (rs.needReadable || rs.length < rs.highWaterMark) {\n    this._read(rs.highWaterMark);\n  }\n}\n\nfunction Transform(options) {\n  if (!(this instanceof Transform)) return new Transform(options);\n\n  Duplex.call(this, options);\n\n  this._transformState = {\n    afterTransform: afterTransform.bind(this),\n    needTransform: false,\n    transforming: false,\n    writecb: null,\n    writechunk: null,\n    writeencoding: null\n  };\n\n  // start out asking for a readable event once data is transformed.\n  this._readableState.needReadable = true;\n\n  // we have implemented the _read method, and done the other things\n  // that Readable wants before the first _read call, so unset the\n  // sync guard flag.\n  this._readableState.sync = false;\n\n  if (options) {\n    if (typeof options.transform === 'function') this._transform = options.transform;\n\n    if (typeof options.flush === 'function') this._flush = options.flush;\n  }\n\n  // When the writable side finishes, then flush out anything remaining.\n  this.on('prefinish', prefinish);\n}\n\nfunction prefinish() {\n  var _this = this;\n\n  if (typeof this._flush === 'function') {\n    this._flush(function (er, data) {\n      done(_this, er, data);\n    });\n  } else {\n    done(this, null, null);\n  }\n}\n\nTransform.prototype.push = function (chunk, encoding) {\n  this._transformState.needTransform = false;\n  return Duplex.prototype.push.call(this, chunk, encoding);\n};\n\n// This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\nTransform.prototype._transform = function (chunk, encoding, cb) {\n  throw new Error('_transform() is not implemented');\n};\n\nTransform.prototype._write = function (chunk, encoding, cb) {\n  var ts = this._transformState;\n  ts.writecb = cb;\n  ts.writechunk = chunk;\n  ts.writeencoding = encoding;\n  if (!ts.transforming) {\n    var rs = this._readableState;\n    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);\n  }\n};\n\n// Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\nTransform.prototype._read = function (n) {\n  var ts = this._transformState;\n\n  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {\n    ts.transforming = true;\n    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n  } else {\n    // mark that we need a transform, so that any data that comes in\n    // will get processed, now that we've asked for it.\n    ts.needTransform = true;\n  }\n};\n\nTransform.prototype._destroy = function (err, cb) {\n  var _this2 = this;\n\n  Duplex.prototype._destroy.call(this, err, function (err2) {\n    cb(err2);\n    _this2.emit('close');\n  });\n};\n\nfunction done(stream, er, data) {\n  if (er) return stream.emit('error', er);\n\n  if (data != null) // single equals check for both `null` and `undefined`\n    stream.push(data);\n\n  // if there's nothing in the write buffer, then that means\n  // that nothing more will ever be provided\n  if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');\n\n  if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');\n\n  return stream.push(null);\n}","'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Buffer = require('safe-buffer').Buffer;\nvar util = require('util');\n\nfunction copyBuffer(src, target, offset) {\n  src.copy(target, offset);\n}\n\nmodule.exports = function () {\n  function BufferList() {\n    _classCallCheck(this, BufferList);\n\n    this.head = null;\n    this.tail = null;\n    this.length = 0;\n  }\n\n  BufferList.prototype.push = function push(v) {\n    var entry = { data: v, next: null };\n    if (this.length > 0) this.tail.next = entry;else this.head = entry;\n    this.tail = entry;\n    ++this.length;\n  };\n\n  BufferList.prototype.unshift = function unshift(v) {\n    var entry = { data: v, next: this.head };\n    if (this.length === 0) this.tail = entry;\n    this.head = entry;\n    ++this.length;\n  };\n\n  BufferList.prototype.shift = function shift() {\n    if (this.length === 0) return;\n    var ret = this.head.data;\n    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;\n    --this.length;\n    return ret;\n  };\n\n  BufferList.prototype.clear = function clear() {\n    this.head = this.tail = null;\n    this.length = 0;\n  };\n\n  BufferList.prototype.join = function join(s) {\n    if (this.length === 0) return '';\n    var p = this.head;\n    var ret = '' + p.data;\n    while (p = p.next) {\n      ret += s + p.data;\n    }return ret;\n  };\n\n  BufferList.prototype.concat = function concat(n) {\n    if (this.length === 0) return Buffer.alloc(0);\n    if (this.length === 1) return this.head.data;\n    var ret = Buffer.allocUnsafe(n >>> 0);\n    var p = this.head;\n    var i = 0;\n    while (p) {\n      copyBuffer(p.data, ret, i);\n      i += p.data.length;\n      p = p.next;\n    }\n    return ret;\n  };\n\n  return BufferList;\n}();\n\nif (util && util.inspect && util.inspect.custom) {\n  module.exports.prototype[util.inspect.custom] = function () {\n    var obj = util.inspect({ length: this.length });\n    return this.constructor.name + ' ' + obj;\n  };\n}","\n/**\n * Module exports.\n */\n\nmodule.exports = deprecate;\n\n/**\n * Mark that a method should not be used.\n * Returns a modified function which warns once by default.\n *\n * If `localStorage.noDeprecation = true` is set, then it is a no-op.\n *\n * If `localStorage.throwDeprecation = true` is set, then deprecated functions\n * will throw an Error when invoked.\n *\n * If `localStorage.traceDeprecation = true` is set, then deprecated functions\n * will invoke `console.trace()` instead of `console.error()`.\n *\n * @param {Function} fn - the function to deprecate\n * @param {String} msg - the string to print to the console when `fn` is invoked\n * @returns {Function} a new \"deprecated\" version of `fn`\n * @api public\n */\n\nfunction deprecate (fn, msg) {\n  if (config('noDeprecation')) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (config('throwDeprecation')) {\n        throw new Error(msg);\n      } else if (config('traceDeprecation')) {\n        console.trace(msg);\n      } else {\n        console.warn(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n}\n\n/**\n * Checks `localStorage` for boolean values for the given `name`.\n *\n * @param {String} name\n * @returns {Boolean}\n * @api private\n */\n\nfunction config (name) {\n  // accessing global.localStorage can trigger a DOMException in sandboxed iframes\n  try {\n    if (!global.localStorage) return false;\n  } catch (_) {\n    return false;\n  }\n  var val = global.localStorage[name];\n  if (null == val) return false;\n  return String(val).toLowerCase() === 'true';\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a passthrough stream.\n// basically just the most minimal sort of Transform stream.\n// Every written chunk gets output as-is.\n\n'use strict';\n\nmodule.exports = PassThrough;\n\nvar Transform = require('./_stream_transform');\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nutil.inherits(PassThrough, Transform);\n\nfunction PassThrough(options) {\n  if (!(this instanceof PassThrough)) return new PassThrough(options);\n\n  Transform.call(this, options);\n}\n\nPassThrough.prototype._transform = function (chunk, encoding, cb) {\n  cb(null, chunk);\n};","module.exports = require('./lib/_stream_writable.js');\n","module.exports = require('./lib/_stream_duplex.js');\n","module.exports = require('./readable').Transform\n","module.exports = require('./readable').PassThrough\n"],"sourceRoot":""}