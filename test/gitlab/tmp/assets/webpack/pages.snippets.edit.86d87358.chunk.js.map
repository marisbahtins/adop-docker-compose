{"version":3,"sources":["webpack:////home/git/gitlab/node_modules/mousetrap/plugins/pause/mousetrap-pause.js","webpack:///./pages/snippets/edit/index.js","webpack:///./snippet/snippet_bundle.js","webpack:///./pages/snippets/form.js","webpack:///./dropzone_input.js","webpack:///./gl_form.js","webpack:///./zen_mode.js"],"names":["Mousetrap","self","_originalStopCallback","stopCallback","enabled","e","element","combo","pause","unpause","__webpack_require__","r","__webpack_exports__","_snippet_snippet_bundle__WEBPACK_IMPORTED_MODULE_0__","_form__WEBPACK_IMPORTED_MODULE_1__","document","addEventListener","initSnippet","form","jquery__WEBPACK_IMPORTED_MODULE_0__","jquery__WEBPACK_IMPORTED_MODULE_0___default","n","editor","ace","edit","$","on","val","getValue","_gl_form__WEBPACK_IMPORTED_MODULE_1__","_zen_mode__WEBPACK_IMPORTED_MODULE_2__","GLForm","members","issues","mergeRequests","epics","milestones","labels","snippets","ZenMode","dropzoneInput","handlePaste","pasteText","addFileToForm","updateAttachingMessage","isImage","getFilename","uploadFile","$attachButton","find","$attachingFileMessage","$cancelButton","$retryLink","$uploadProgress","$uploadingErrorContainer","$uploadingErrorMessage","$uploadingProgressContainer","uploadsPath","data","window","uploads_path","maxFileSize","gon","max_file_size","formTextarea","wrap","event","$mdArea","closest","setupMarkdownPreview","$formDropzone","parent","addClass","append","dropzone","url","dictDefaultMessage","clickable","paramName","maxFilesize","uploadMultiple","headers","csrf","previewContainer","processing","alert","dragover","css","dragleave","removeClass","drop","focus","success","header","response","processingFileCount","this","getQueuedFiles","length","getUploadingFiles","shouldPad","link","markdown","error","file","res","errorMessage","arguments","undefined","xhr","message","responseText","_","isString","html","totaluploadprogress","totalUploadProgress","files","text","concat","Math","round","sending","removedfile","queuecomplete","remove","trigger","child","children","preventDefault","stopPropagation","Dropzone","forElement","get","removeAllFiles","dropzoneInstance","target","querySelector","failedFiles","map","failedFile","status","ERROR","accepted","addFile","pasteEvent","originalEvent","clipboardData","items","image","filename","getAsFile","i","item","type","indexOf","formattedText","textarea","caretStart","selectionStart","caretEnd","selectionEnd","textEnd","beforeSelection","substring","afterSelection","setSelectionRange","style","height","scrollHeight","dispatchEvent","Event","path","escape","value","getData","split","closeSpinner","formData","FormData","axios","post","then","_ref","md","$child","index","replace","insertToTextArea","catch","messageContainer","attachingMessage","filesCount","filter","click","autoDiscover","_this","enableGFM","_classCallCheck","Object","assign","GFMConfig","dataSources","gl","GfmAutoComplete","keys","forEach","destroy","setupForm","clearEventListeners","autoComplete","isNewForm","is","utils","disableButtonIfEmptyField","setup","autosize","addEventListeners","addMarkdownListeners","show","isAutosizeable","setupAutosize","_this2","off","setHeightData","bind","destroyAutosize","setTimeout","outerHeight","removeMarkdownListeners","active_backdrop","active_textarea","currentTarget","enter","exit","keyCode","backdrop","removeAttr","scrollTo","$dropzone","hasClass","enable","zen_area","offset"],"mappings":"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","file":"pages.snippets.edit.86d87358.chunk.js","sourcesContent":["/**\n * adds a pause and unpause method to Mousetrap\n * this allows you to enable or disable keyboard shortcuts\n * without having to reset Mousetrap and rebind everything\n */\n/* global Mousetrap:true */\nMousetrap = (function(Mousetrap) {\n    var self = Mousetrap,\n        _originalStopCallback = self.stopCallback,\n        enabled = true;\n\n    self.stopCallback = function(e, element, combo) {\n        if (!enabled) {\n            return true;\n        }\n\n        return _originalStopCallback(e, element, combo);\n    };\n\n    self.pause = function() {\n        enabled = false;\n    };\n\n    self.unpause = function() {\n        enabled = true;\n    };\n\n    return self;\n}) (Mousetrap);\n","import initSnippet from '~/snippet/snippet_bundle';\nimport form from '../form';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  initSnippet();\n  form();\n});\n","/* global ace */\n\nimport $ from 'jquery';\n\nexport default () => {\n  const editor = ace.edit('editor');\n\n  $('.snippet-form-holder form').on('submit', () => {\n    $('.snippet-file-content').val(editor.getValue());\n  });\n};\n","import $ from 'jquery';\nimport GLForm from '~/gl_form';\nimport ZenMode from '~/zen_mode';\n\nexport default () => {\n  // eslint-disable-next-line no-new\n  new GLForm($('.snippet-form'), {\n    members: false,\n    issues: false,\n    mergeRequests: false,\n    epics: false,\n    milestones: false,\n    labels: false,\n    snippets: false,\n  });\n  new ZenMode(); // eslint-disable-line no-new\n};\n","import $ from 'jquery';\nimport Dropzone from 'dropzone';\nimport _ from 'underscore';\nimport './behaviors/preview_markdown';\nimport csrf from './lib/utils/csrf';\nimport axios from './lib/utils/axios_utils';\n\nDropzone.autoDiscover = false;\n\n/**\n * Return the error message string from the given response.\n *\n * @param {String|Object} res\n */\nfunction getErrorMessage(res) {\n  if (!res || _.isString(res)) {\n    return res;\n  }\n\n  return res.message;\n}\n\nexport default function dropzoneInput(form) {\n  const divHover = '<div class=\"div-dropzone-hover\"></div>';\n  const iconPaperclip = '<i class=\"fa fa-paperclip div-dropzone-icon\"></i>';\n  const $attachButton = form.find('.button-attach-file');\n  const $attachingFileMessage = form.find('.attaching-file-message');\n  const $cancelButton = form.find('.button-cancel-uploading-files');\n  const $retryLink = form.find('.retry-uploading-link');\n  const $uploadProgress = form.find('.uploading-progress');\n  const $uploadingErrorContainer = form.find('.uploading-error-container');\n  const $uploadingErrorMessage = form.find('.uploading-error-message');\n  const $uploadingProgressContainer = form.find('.uploading-progress-container');\n  const uploadsPath = form.data('uploads-path') || window.uploads_path || null;\n  const maxFileSize = gon.max_file_size || 10;\n  const formTextarea = form.find('.js-gfm-input');\n  let handlePaste;\n  let pasteText;\n  let addFileToForm;\n  let updateAttachingMessage;\n  let isImage;\n  let getFilename;\n  let uploadFile;\n\n  formTextarea.wrap('<div class=\"div-dropzone\"></div>');\n  formTextarea.on('paste', event => handlePaste(event));\n\n  // Add dropzone area to the form.\n  const $mdArea = formTextarea.closest('.md-area');\n  form.setupMarkdownPreview();\n  const $formDropzone = form.find('.div-dropzone');\n  $formDropzone.parent().addClass('div-dropzone-wrapper');\n  $formDropzone.append(divHover);\n  $formDropzone.find('.div-dropzone-hover').append(iconPaperclip);\n\n  if (!uploadsPath) {\n    $formDropzone.addClass('js-invalid-dropzone');\n    return null;\n  }\n\n  const dropzone = $formDropzone.dropzone({\n    url: uploadsPath,\n    dictDefaultMessage: '',\n    clickable: true,\n    paramName: 'file',\n    maxFilesize: maxFileSize,\n    uploadMultiple: false,\n    headers: csrf.headers,\n    previewContainer: false,\n    processing: () => $('.div-dropzone-alert').alert('close'),\n    dragover: () => {\n      $mdArea.addClass('is-dropzone-hover');\n      form.find('.div-dropzone-hover').css('opacity', 0.7);\n    },\n    dragleave: () => {\n      $mdArea.removeClass('is-dropzone-hover');\n      form.find('.div-dropzone-hover').css('opacity', 0);\n    },\n    drop: () => {\n      $mdArea.removeClass('is-dropzone-hover');\n      form.find('.div-dropzone-hover').css('opacity', 0);\n      formTextarea.focus();\n    },\n    success(header, response) {\n      const processingFileCount = this.getQueuedFiles().length + this.getUploadingFiles().length;\n      const shouldPad = processingFileCount >= 1;\n\n      pasteText(response.link.markdown, shouldPad);\n      // Show 'Attach a file' link only when all files have been uploaded.\n      if (!processingFileCount) $attachButton.removeClass('hide');\n      addFileToForm(response.link.url);\n    },\n    error: (file, errorMessage = 'Attaching the file failed.', xhr) => {\n      // If 'error' event is fired by dropzone, the second parameter is error message.\n      // If the 'errorMessage' parameter is empty, the default error message is set.\n      // If the 'error' event is fired by backend (xhr) error response, the third parameter is\n      // xhr object (xhr.responseText is error message).\n      // On error we hide the 'Attach' and 'Cancel' buttons\n      // and show an error.\n      const message = getErrorMessage(errorMessage || xhr.responseText);\n\n      $uploadingErrorContainer.removeClass('hide');\n      $uploadingErrorMessage.html(message);\n      $attachButton.addClass('hide');\n      $cancelButton.addClass('hide');\n    },\n    totaluploadprogress(totalUploadProgress) {\n      updateAttachingMessage(this.files, $attachingFileMessage);\n      $uploadProgress.text(`${Math.round(totalUploadProgress)}%`);\n    },\n    sending: () => {\n      // DOM elements already exist.\n      // Instead of dynamically generating them,\n      // we just either hide or show them.\n      $attachButton.addClass('hide');\n      $uploadingErrorContainer.addClass('hide');\n      $uploadingProgressContainer.removeClass('hide');\n      $cancelButton.removeClass('hide');\n    },\n    removedfile: () => {\n      $attachButton.removeClass('hide');\n      $cancelButton.addClass('hide');\n      $uploadingProgressContainer.addClass('hide');\n      $uploadingErrorContainer.addClass('hide');\n    },\n    queuecomplete: () => {\n      $('.dz-preview').remove();\n      $('.markdown-area').trigger('input');\n\n      $uploadingProgressContainer.addClass('hide');\n      $cancelButton.addClass('hide');\n    },\n  });\n\n  const child = $(dropzone[0]).children('textarea');\n\n  // removeAllFiles(true) stops uploading files (if any)\n  // and remove them from dropzone files queue.\n  $cancelButton.on('click', e => {\n    e.preventDefault();\n    e.stopPropagation();\n    Dropzone.forElement($formDropzone.get(0)).removeAllFiles(true);\n  });\n\n  // If 'error' event is fired, we store a failed files,\n  // clear dropzone files queue, change status of failed files to undefined,\n  // and add that files to the dropzone files queue again.\n  // addFile() adds file to dropzone files queue and upload it.\n  $retryLink.on('click', e => {\n    const dropzoneInstance = Dropzone.forElement(\n      e.target.closest('.js-main-target-form').querySelector('.div-dropzone'),\n    );\n    const failedFiles = dropzoneInstance.files;\n\n    e.preventDefault();\n\n    // 'true' parameter of removeAllFiles() cancels\n    // uploading of files that are being uploaded at the moment.\n    dropzoneInstance.removeAllFiles(true);\n\n    failedFiles.map(failedFile => {\n      const file = failedFile;\n\n      if (file.status === Dropzone.ERROR) {\n        file.status = undefined;\n        file.accepted = undefined;\n      }\n\n      return dropzoneInstance.addFile(file);\n    });\n  });\n  // eslint-disable-next-line consistent-return\n  handlePaste = event => {\n    const pasteEvent = event.originalEvent;\n    if (pasteEvent.clipboardData && pasteEvent.clipboardData.items) {\n      const image = isImage(pasteEvent);\n      if (image) {\n        event.preventDefault();\n        const filename = getFilename(pasteEvent) || 'image.png';\n        const text = `{{${filename}}}`;\n        pasteText(text);\n        return uploadFile(image.getAsFile(), filename);\n      }\n    }\n  };\n\n  isImage = data => {\n    let i = 0;\n    while (i < data.clipboardData.items.length) {\n      const item = data.clipboardData.items[i];\n      if (item.type.indexOf('image') !== -1) {\n        return item;\n      }\n      i += 1;\n    }\n    return false;\n  };\n\n  pasteText = (text, shouldPad) => {\n    let formattedText = text;\n    if (shouldPad) {\n      formattedText += '\\n\\n';\n    }\n    const textarea = child.get(0);\n    const caretStart = textarea.selectionStart;\n    const caretEnd = textarea.selectionEnd;\n    const textEnd = $(child).val().length;\n    const beforeSelection = $(child)\n      .val()\n      .substring(0, caretStart);\n    const afterSelection = $(child)\n      .val()\n      .substring(caretEnd, textEnd);\n    $(child).val(beforeSelection + formattedText + afterSelection);\n    textarea.setSelectionRange(caretStart + formattedText.length, caretEnd + formattedText.length);\n    textarea.style.height = `${textarea.scrollHeight}px`;\n    formTextarea.get(0).dispatchEvent(new Event('input'));\n    return formTextarea.trigger('input');\n  };\n\n  addFileToForm = path => {\n    $(form).append(`<input type=\"hidden\" name=\"files[]\" value=\"${_.escape(path)}\">`);\n  };\n\n  getFilename = e => {\n    let value;\n    if (window.clipboardData && window.clipboardData.getData) {\n      value = window.clipboardData.getData('Text');\n    } else if (e.clipboardData && e.clipboardData.getData) {\n      value = e.clipboardData.getData('text/plain');\n    }\n    value = value.split('\\r');\n    return value[0];\n  };\n\n  const showSpinner = () => $uploadingProgressContainer.removeClass('hide');\n\n  const closeSpinner = () => $uploadingProgressContainer.addClass('hide');\n\n  const showError = message => {\n    $uploadingErrorContainer.removeClass('hide');\n    $uploadingErrorMessage.html(message);\n  };\n\n  const closeAlertMessage = () => form.find('.div-dropzone-alert').alert('close');\n\n  const insertToTextArea = (filename, url) => {\n    const $child = $(child);\n    $child.val((index, val) => val.replace(`{{${filename}}}`, url));\n\n    $child.trigger('change');\n  };\n\n  uploadFile = (item, filename) => {\n    const formData = new FormData();\n    formData.append('file', item, filename);\n\n    showSpinner();\n    closeAlertMessage();\n\n    axios\n      .post(uploadsPath, formData)\n      .then(({ data }) => {\n        const md = data.link.markdown;\n\n        insertToTextArea(filename, md);\n        closeSpinner();\n      })\n      .catch(e => {\n        showError(e.response.data.message);\n        closeSpinner();\n      });\n  };\n\n  updateAttachingMessage = (files, messageContainer) => {\n    let attachingMessage;\n    const filesCount = files.filter(file => file.status === 'uploading' || file.status === 'queued')\n      .length;\n\n    // Dinamycally change uploading files text depending on files number in\n    // dropzone files queue.\n    if (filesCount > 1) {\n      attachingMessage = `Attaching ${filesCount} files -`;\n    } else {\n      attachingMessage = 'Attaching a file -';\n    }\n\n    messageContainer.text(attachingMessage);\n  };\n\n  form.find('.markdown-selector').click(function onMarkdownClick(e) {\n    e.preventDefault();\n    $(this)\n      .closest('.gfm-form')\n      .find('.div-dropzone')\n      .click();\n    formTextarea.focus();\n  });\n\n  return Dropzone.forElement($formDropzone.get(0));\n}\n","import $ from 'jquery';\nimport autosize from 'autosize';\nimport GfmAutoComplete, * as GFMConfig from './gfm_auto_complete';\nimport dropzoneInput from './dropzone_input';\nimport { addMarkdownListeners, removeMarkdownListeners } from './lib/utils/text_markdown';\n\nexport default class GLForm {\n  constructor(form, enableGFM = {}) {\n    this.form = form;\n    this.textarea = this.form.find('textarea.js-gfm-input');\n    this.enableGFM = Object.assign({}, GFMConfig.defaultAutocompleteConfig, enableGFM);\n    // Disable autocomplete for keywords which do not have dataSources available\n    const dataSources = (gl.GfmAutoComplete && gl.GfmAutoComplete.dataSources) || {};\n    Object.keys(this.enableGFM).forEach(item => {\n      if (item !== 'emojis') {\n        this.enableGFM[item] = !!dataSources[item];\n      }\n    });\n    // Before we start, we should clean up any previous data for this form\n    this.destroy();\n    // Set up the form\n    this.setupForm();\n    this.form.data('glForm', this);\n  }\n\n  destroy() {\n    // Clean form listeners\n    this.clearEventListeners();\n    if (this.autoComplete) {\n      this.autoComplete.destroy();\n    }\n    this.form.data('glForm', null);\n  }\n\n  setupForm() {\n    const isNewForm = this.form.is(':not(.gfm-form)');\n    this.form.removeClass('js-new-note-form');\n    if (isNewForm) {\n      this.form.find('.div-dropzone').remove();\n      this.form.addClass('gfm-form');\n      // remove notify commit author checkbox for non-commit notes\n      gl.utils.disableButtonIfEmptyField(\n        this.form.find('.js-note-text'),\n        this.form.find('.js-comment-button, .js-note-new-discussion'),\n      );\n      this.autoComplete = new GfmAutoComplete(gl.GfmAutoComplete && gl.GfmAutoComplete.dataSources);\n      this.autoComplete.setup(this.form.find('.js-gfm-input'), this.enableGFM);\n      dropzoneInput(this.form);\n      autosize(this.textarea);\n    }\n    // form and textarea event listeners\n    this.addEventListeners();\n    addMarkdownListeners(this.form);\n    this.form.show();\n    if (this.isAutosizeable) this.setupAutosize();\n  }\n\n  setupAutosize() {\n    this.textarea.off('autosize:resized').on('autosize:resized', this.setHeightData.bind(this));\n\n    this.textarea.off('mouseup.autosize').on('mouseup.autosize', this.destroyAutosize.bind(this));\n\n    setTimeout(() => {\n      autosize(this.textarea);\n      this.textarea.css('resize', 'vertical');\n    }, 0);\n  }\n\n  setHeightData() {\n    this.textarea.data('height', this.textarea.outerHeight());\n  }\n\n  destroyAutosize() {\n    const outerHeight = this.textarea.outerHeight();\n\n    if (this.textarea.data('height') === outerHeight) return;\n\n    autosize.destroy(this.textarea);\n\n    this.textarea.data('height', outerHeight);\n    this.textarea.outerHeight(outerHeight);\n    this.textarea.css('max-height', window.outerHeight);\n  }\n\n  clearEventListeners() {\n    this.textarea.off('focus');\n    this.textarea.off('blur');\n    removeMarkdownListeners(this.form);\n  }\n\n  addEventListeners() {\n    this.textarea.on('focus', function focusTextArea() {\n      $(this)\n        .closest('.md-area')\n        .addClass('is-focused');\n    });\n    this.textarea.on('blur', function blurTextArea() {\n      $(this)\n        .closest('.md-area')\n        .removeClass('is-focused');\n    });\n  }\n}\n","/* eslint-disable func-names, prefer-arrow-callback, no-unused-vars, consistent-return, camelcase, class-methods-use-this */\n\n// Zen Mode (full screen) textarea\n//\n/*= provides zen_mode:enter */\n/*= provides zen_mode:leave */\n\nimport $ from 'jquery';\nimport 'vendor/jquery.scrollTo';\nimport Dropzone from 'dropzone';\nimport Mousetrap from 'mousetrap';\nimport 'mousetrap/plugins/pause/mousetrap-pause';\n\nDropzone.autoDiscover = false;\n\n//\n// ### Events\n//\n// `zen_mode:enter`\n//\n// Fired when the \"Edit in fullscreen\" link is clicked.\n//\n// **Synchronicity** Sync\n// **Bubbles** Yes\n// **Cancelable** No\n// **Target** a.js-zen-enter\n//\n// `zen_mode:leave`\n//\n// Fired when the \"Leave Fullscreen\" link is clicked.\n//\n// **Synchronicity** Sync\n// **Bubbles** Yes\n// **Cancelable** No\n// **Target** a.js-zen-leave\n//\n\nexport default class ZenMode {\n  constructor() {\n    this.active_backdrop = null;\n    this.active_textarea = null;\n    $(document).on('click', '.js-zen-enter', function(e) {\n      e.preventDefault();\n      return $(e.currentTarget).trigger('zen_mode:enter');\n    });\n    $(document).on('click', '.js-zen-leave', function(e) {\n      e.preventDefault();\n      return $(e.currentTarget).trigger('zen_mode:leave');\n    });\n    $(document).on(\n      'zen_mode:enter',\n      (function(_this) {\n        return function(e) {\n          return _this.enter(\n            $(e.target)\n              .closest('.md-area')\n              .find('.zen-backdrop'),\n          );\n        };\n      })(this),\n    );\n    $(document).on(\n      'zen_mode:leave',\n      (function(_this) {\n        return function(e) {\n          return _this.exit();\n        };\n      })(this),\n    );\n    $(document).on('keydown', function(e) {\n      // Esc\n      if (e.keyCode === 27) {\n        e.preventDefault();\n        return $(document).trigger('zen_mode:leave');\n      }\n    });\n  }\n\n  enter(backdrop) {\n    Mousetrap.pause();\n    this.active_backdrop = $(backdrop);\n    this.active_backdrop.addClass('fullscreen');\n    this.active_textarea = this.active_backdrop.find('textarea');\n    // Prevent a user-resized textarea from persisting to fullscreen\n    this.active_textarea.removeAttr('style');\n    this.active_textarea.focus();\n  }\n\n  exit() {\n    if (this.active_textarea) {\n      Mousetrap.unpause();\n      this.active_textarea.closest('.zen-backdrop').removeClass('fullscreen');\n      this.scrollTo(this.active_textarea);\n      this.active_textarea = null;\n      this.active_backdrop = null;\n\n      const $dropzone = $('.div-dropzone');\n      if ($dropzone && !$dropzone.hasClass('js-invalid-dropzone')) {\n        Dropzone.forElement('.div-dropzone').enable();\n      }\n    }\n  }\n\n  scrollTo(zen_area) {\n    return $.scrollTo(zen_area, 0, {\n      offset: -150,\n    });\n  }\n}\n"],"sourceRoot":""}