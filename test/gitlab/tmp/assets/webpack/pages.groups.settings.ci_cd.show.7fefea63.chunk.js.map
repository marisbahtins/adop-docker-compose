{"version":3,"sources":["webpack:///./pages/groups/settings/ci_cd/show/index.js","webpack:///./pages/groups/index.js","webpack:///./settings_panels.js","webpack:///./create_item_dropdown.js","webpack:///./toggle_buttons.js","webpack:///./behaviors/secret_values.js","webpack:///./ci_variable_list/ci_variable_list.js","webpack:///./ci_variable_list/ajax_variable_list.js","webpack:///./lib/utils/http_status.js"],"names":["__webpack_require__","r","__webpack_exports__","_settings_panels__WEBPACK_IMPORTED_MODULE_0__","_ci_variable_list_ajax_variable_list__WEBPACK_IMPORTED_MODULE_1__","document","addEventListener","initSettingsPanels","variableListEl","querySelector","AjaxVariableList","container","saveButton","errorBox","saveEndpoint","dataset","_persistent_user_callout__WEBPACK_IMPORTED_MODULE_0__","_projects_gke_cluster_dropdowns__WEBPACK_IMPORTED_MODULE_1__","callout","page","body","indexOf","PersistentUserCallout","initGkeDropdowns","d","jquery__WEBPACK_IMPORTED_MODULE_0__","jquery__WEBPACK_IMPORTED_MODULE_0___default","n","_locale__WEBPACK_IMPORTED_MODULE_1__","expandSection","$section","find","text","__","off","scrollTop","addClass","hasClass","one","removeClass","toggleSection","on","closeSection","$","each","i","elm","window","location","hash","$target","length","CreateItemDropdown","options","_classCallCheck","this","defaultToggleLabel","fieldName","onSelect","getDataOption","getData","getDataRemote","filterRemote","createNewItemFromValueOption","createNewItemFromValue","$dropdown","$dropdownContainer","parent","$dropdownFooter","$createButton","buildDropdown","bindEvents","toggleFooter","_this","glDropdown","data","bind","filterable","search","fields","selectable","toggleLabel","selected","_","escape","title","item","id","onFilter","toggleCreateNewButton","clicked","e","preventDefault","html","val","onClickCreateWildcard","refreshData","selectRowAtIndex","remote","execute","term","callback","_this2","arguments","undefined","uniqueData","selectedItem","some","concat","newValue","toggleState","toggleClass","setupToggleButtons","_flash__WEBPACK_IMPORTED_MODULE_1__","_locale__WEBPACK_IMPORTED_MODULE_2__","_lib_utils_common_utils__WEBPACK_IMPORTED_MODULE_3__","updateToggle","toggle","isOn","classList","clickCallback","querySelectorAll","forEach","input","parseBoolean","value","previousIsOn","setAttribute","Promise","resolve","then","catch","removeAttribute","trigger","Flash","SecretValues","_ref","_ref$valueSelector","valueSelector","_ref$placeholderSelec","placeholderSelector","revealButton","isRevealed","secretRevealStatus","updateDom","onRevealButtonClicked","previousIsRevealed","values","placeholder","textContent","n__","ALL_ENVIRONMENTS_STRING","s__","createEnvironmentItem","VariableList","formField","$container","environmentDropdownMap","WeakMap","inputMap","selector","default","key","secret_value","protected","attr","environment_scope","_destroy","secretValues","init","index","rowEl","initRow","removeRow","currentTarget","closest","inputSelector","Object","keys","map","name","join","$row","is","checkIfRowTouched","$lastRow","last","insertRow","css","$environmentSelect","createItemDropdown","getEnvironmentValues","refreshDropdownData","clearDropdown","set","_this3","$rowClone","clone","removeAttr","entry","remove","after","row","hide","_this4","$el","isEnabled","_this5","toArray","slice","resultant","$input","valueMap","reduce","prevValueMap","envInput","_objectSpread","_defineProperty","_this6","environmentDropdown","get","_ref$formField","variableList","onSaveClicked","loadingIcon","toggleEnableRow","axios","patch","variables_attributes","getAllData","validateStatus","status","statusCodes","OK","MULTIPLE_CHOICES","BAD_REQUEST","res","errors","errorList","updateRowsWithPersistedVariables","variables","hideValues","innerHTML","errorString","persistedVariables","persistedVariableMap","variableMap","variable","destroyInput","persistedVariable","successCodes","httpStatusCodes","ABORTED","CREATED","ACCEPTED","NON_AUTHORITATIVE_INFORMATION","NO_CONTENT","RESET_CONTENT","PARTIAL_CONTENT","MULTI_STATUS","ALREADY_REPORTED","IM_USED","FORBIDDEN","NOT_FOUND","UNPROCESSABLE_ENTITY"],"mappings":"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","file":"pages.groups.settings.ci_cd.show.7fefea63.chunk.js","sourcesContent":["import initSettingsPanels from '~/settings_panels';\nimport AjaxVariableList from '~/ci_variable_list/ajax_variable_list';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  // Initialize expandable settings panels\n  initSettingsPanels();\n\n  const variableListEl = document.querySelector('.js-ci-variable-list-section');\n  // eslint-disable-next-line no-new\n  new AjaxVariableList({\n    container: variableListEl,\n    saveButton: variableListEl.querySelector('.js-ci-variables-save-button'),\n    errorBox: variableListEl.querySelector('.js-ci-variable-error-box'),\n    saveEndpoint: variableListEl.dataset.saveEndpoint,\n  });\n});\n","import PersistentUserCallout from '~/persistent_user_callout';\nimport initGkeDropdowns from '~/projects/gke_cluster_dropdowns';\n\nfunction initGcpSignupCallout() {\n  const callout = document.querySelector('.gcp-signup-offer');\n\n  if (callout) new PersistentUserCallout(callout); // eslint-disable-line no-new\n}\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const { page } = document.body.dataset;\n  const newClusterViews = [\n    'groups:clusters:new',\n    'groups:clusters:create_gcp',\n    'groups:clusters:create_user',\n  ];\n\n  if (newClusterViews.indexOf(page) > -1) {\n    initGcpSignupCallout();\n    initGkeDropdowns();\n  }\n});\n","import $ from 'jquery';\nimport { __ } from './locale';\n\nfunction expandSection($section) {\n  $section.find('.js-settings-toggle:not(.js-settings-toggle-trigger-only)').text(__('Collapse'));\n  $section\n    .find('.settings-content')\n    .off('scroll.expandSection')\n    .scrollTop(0);\n  $section.addClass('expanded');\n  if (!$section.hasClass('no-animate')) {\n    $section\n      .addClass('animating')\n      .one('animationend.animateSection', () => $section.removeClass('animating'));\n  }\n}\n\nfunction closeSection($section) {\n  $section.find('.js-settings-toggle:not(.js-settings-toggle-trigger-only)').text(__('Expand'));\n  $section.find('.settings-content').on('scroll.expandSection', () => expandSection($section));\n  $section.removeClass('expanded');\n  if (!$section.hasClass('no-animate')) {\n    $section\n      .addClass('animating')\n      .one('animationend.animateSection', () => $section.removeClass('animating'));\n  }\n}\n\nfunction toggleSection($section) {\n  $section.removeClass('no-animate');\n  if ($section.hasClass('expanded')) {\n    closeSection($section);\n  } else {\n    expandSection($section);\n  }\n}\n\nexport default function initSettingsPanels() {\n  $('.settings').each((i, elm) => {\n    const $section = $(elm);\n    $section.on('click.toggleSection', '.js-settings-toggle', () => toggleSection($section));\n\n    if (!$section.hasClass('expanded')) {\n      $section.find('.settings-content').on('scroll.expandSection', () => {\n        $section.removeClass('no-animate');\n        expandSection($section);\n      });\n    }\n  });\n\n  if (window.location.hash) {\n    const $target = $(window.location.hash);\n    if ($target.length && $target.hasClass('settings')) {\n      expandSection($target);\n    }\n  }\n}\n","import _ from 'underscore';\n\nexport default class CreateItemDropdown {\n  /**\n   * @param {Object} options containing\n   *                         `$dropdown` target element\n   *                          `onSelect` event callback\n   * $dropdown must be an element created using `dropdown_tag()` rails helper\n   */\n  constructor(options) {\n    this.defaultToggleLabel = options.defaultToggleLabel;\n    this.fieldName = options.fieldName;\n    this.onSelect = options.onSelect || (() => {});\n    this.getDataOption = options.getData;\n    this.getDataRemote = !!options.filterRemote;\n    this.createNewItemFromValueOption = options.createNewItemFromValue;\n    this.$dropdown = options.$dropdown;\n    this.$dropdownContainer = this.$dropdown.parent();\n    this.$dropdownFooter = this.$dropdownContainer.find('.dropdown-footer');\n    this.$createButton = this.$dropdownContainer.find('.js-dropdown-create-new-item');\n\n    this.buildDropdown();\n    this.bindEvents();\n\n    // Hide footer\n    this.toggleFooter(true);\n  }\n\n  buildDropdown() {\n    this.$dropdown.glDropdown({\n      data: this.getData.bind(this),\n      filterable: true,\n      filterRemote: this.getDataRemote,\n      search: {\n        fields: ['text'],\n      },\n      selectable: true,\n      toggleLabel(selected) {\n        return selected && 'id' in selected ? _.escape(selected.title) : this.defaultToggleLabel;\n      },\n      fieldName: this.fieldName,\n      text(item) {\n        return _.escape(item.text);\n      },\n      id(item) {\n        return _.escape(item.id);\n      },\n      onFilter: this.toggleCreateNewButton.bind(this),\n      clicked: options => {\n        options.e.preventDefault();\n        this.onSelect();\n      },\n    });\n  }\n\n  clearDropdown() {\n    this.$dropdownContainer.find('.dropdown-content').html('');\n    this.$dropdownContainer.find('.dropdown-input-field').val('');\n  }\n\n  bindEvents() {\n    this.$createButton.on('click', this.onClickCreateWildcard.bind(this));\n  }\n\n  onClickCreateWildcard(e) {\n    e.preventDefault();\n\n    this.refreshData();\n    this.$dropdown.data('glDropdown').selectRowAtIndex();\n  }\n\n  refreshData() {\n    // Refresh the dropdown's data, which ends up calling `getData`\n    this.$dropdown.data('glDropdown').remote.execute();\n  }\n\n  getData(term, callback) {\n    this.getDataOption(term, (data = []) => {\n      // Ensure the selected item isn't already in the data to avoid duplicates\n      const alreadyHasSelectedItem =\n        this.selectedItem && data.some(item => item.id === this.selectedItem.id);\n\n      let uniqueData = data;\n      if (!alreadyHasSelectedItem) {\n        uniqueData = data.concat(this.selectedItem || []);\n      }\n\n      callback(uniqueData);\n    });\n  }\n\n  createNewItemFromValue(newValue) {\n    if (this.createNewItemFromValueOption) {\n      return this.createNewItemFromValueOption(newValue);\n    }\n\n    return {\n      title: newValue,\n      id: newValue,\n      text: newValue,\n    };\n  }\n\n  toggleCreateNewButton(newValue) {\n    if (newValue) {\n      this.selectedItem = this.createNewItemFromValue(newValue);\n\n      this.$dropdownContainer.find('.js-dropdown-create-new-item code').text(newValue);\n    }\n\n    this.toggleFooter(!newValue);\n  }\n\n  toggleFooter(toggleState) {\n    this.$dropdownFooter.toggleClass('hidden', toggleState);\n  }\n}\n","import $ from 'jquery';\nimport Flash from './flash';\nimport { __ } from './locale';\nimport { parseBoolean } from './lib/utils/common_utils';\n\n/*\n example HAML:\n ```\n  %button.js-project-feature-toggle.project-feature-toggle{ type: \"button\",\n    class: \"#{'is-checked' if enabled?}\",\n    'aria-label': _('Toggle Kubernetes Cluster') }\n    %input{ type: \"hidden\", class: 'js-project-feature-toggle-input', value: enabled? }\n  ```\n*/\n\nfunction updateToggle(toggle, isOn) {\n  toggle.classList.toggle('is-checked', isOn);\n}\n\nfunction onToggleClicked(toggle, input, clickCallback) {\n  const previousIsOn = parseBoolean(input.value);\n\n  // Visually change the toggle and start loading\n  updateToggle(toggle, !previousIsOn);\n  toggle.setAttribute('disabled', true);\n  toggle.classList.toggle('is-loading', true);\n\n  Promise.resolve(clickCallback(!previousIsOn, toggle))\n    .then(() => {\n      // Actually change the input value\n      input.setAttribute('value', !previousIsOn);\n    })\n    .catch(() => {\n      // Revert the visuals if something goes wrong\n      updateToggle(toggle, previousIsOn);\n    })\n    .then(() => {\n      // Remove the loading indicator in any case\n      toggle.removeAttribute('disabled');\n      toggle.classList.toggle('is-loading', false);\n\n      $(input).trigger('trigger-change');\n    })\n    .catch(() => {\n      Flash(__('Something went wrong when toggling the button'));\n    });\n}\n\nexport default function setupToggleButtons(container, clickCallback = () => {}) {\n  const toggles = container.querySelectorAll('.js-project-feature-toggle');\n\n  toggles.forEach(toggle => {\n    const input = toggle.querySelector('.js-project-feature-toggle-input');\n    const isOn = parseBoolean(input.value);\n\n    // Get the visible toggle in sync with the hidden input\n    updateToggle(toggle, isOn);\n\n    toggle.addEventListener('click', onToggleClicked.bind(null, toggle, input, clickCallback));\n  });\n}\n","import { n__ } from '../locale';\nimport { parseBoolean } from '../lib/utils/common_utils';\n\nexport default class SecretValues {\n  constructor({\n    container,\n    valueSelector = '.js-secret-value',\n    placeholderSelector = '.js-secret-value-placeholder',\n  }) {\n    this.container = container;\n    this.valueSelector = valueSelector;\n    this.placeholderSelector = placeholderSelector;\n  }\n\n  init() {\n    this.revealButton = this.container.querySelector('.js-secret-value-reveal-button');\n\n    if (this.revealButton) {\n      const isRevealed = parseBoolean(this.revealButton.dataset.secretRevealStatus);\n      this.updateDom(isRevealed);\n\n      this.revealButton.addEventListener('click', this.onRevealButtonClicked.bind(this));\n    }\n  }\n\n  onRevealButtonClicked() {\n    const previousIsRevealed = parseBoolean(this.revealButton.dataset.secretRevealStatus);\n    this.updateDom(!previousIsRevealed);\n  }\n\n  updateDom(isRevealed) {\n    const values = this.container.querySelectorAll(this.valueSelector);\n    values.forEach(value => {\n      value.classList.toggle('hide', !isRevealed);\n    });\n\n    const placeholders = this.container.querySelectorAll(this.placeholderSelector);\n    placeholders.forEach(placeholder => {\n      placeholder.classList.toggle('hide', isRevealed);\n    });\n\n    this.revealButton.textContent = isRevealed\n      ? n__('Hide value', 'Hide values', values.length)\n      : n__('Reveal value', 'Reveal values', values.length);\n    this.revealButton.dataset.secretRevealStatus = isRevealed;\n  }\n}\n","import $ from 'jquery';\nimport { parseBoolean } from '../lib/utils/common_utils';\nimport { s__ } from '../locale';\nimport setupToggleButtons from '../toggle_buttons';\nimport CreateItemDropdown from '../create_item_dropdown';\nimport SecretValues from '../behaviors/secret_values';\n\nconst ALL_ENVIRONMENTS_STRING = s__('CiVariable|All environments');\n\nfunction createEnvironmentItem(value) {\n  return {\n    title: value === '*' ? ALL_ENVIRONMENTS_STRING : value,\n    id: value,\n    text: value === '*' ? s__('CiVariable|* (All environments)') : value,\n  };\n}\n\nexport default class VariableList {\n  constructor({ container, formField }) {\n    this.$container = $(container);\n    this.formField = formField;\n    this.environmentDropdownMap = new WeakMap();\n\n    this.inputMap = {\n      id: {\n        selector: '.js-ci-variable-input-id',\n        default: '',\n      },\n      key: {\n        selector: '.js-ci-variable-input-key',\n        default: '',\n      },\n      secret_value: {\n        selector: '.js-ci-variable-input-value',\n        default: '',\n      },\n      protected: {\n        selector: '.js-ci-variable-input-protected',\n        // use `attr` instead of `data` as we don't want the value to be\n        // converted. we need the value as a string.\n        default: $('.js-ci-variable-input-protected').attr('data-default'),\n      },\n      environment_scope: {\n        // We can't use a `.js-` class here because\n        // gl_dropdown replaces the <input> and doesn't copy over the class\n        // See https://gitlab.com/gitlab-org/gitlab-ce/issues/42458\n        selector: `input[name=\"${this.formField}[variables_attributes][][environment_scope]\"]`,\n        default: '*',\n      },\n      _destroy: {\n        selector: '.js-ci-variable-input-destroy',\n        default: '',\n      },\n    };\n\n    this.secretValues = new SecretValues({\n      container: this.$container[0],\n      valueSelector: '.js-row:not(:last-child) .js-secret-value',\n      placeholderSelector: '.js-row:not(:last-child) .js-secret-value-placeholder',\n    });\n  }\n\n  init() {\n    this.bindEvents();\n    this.secretValues.init();\n  }\n\n  bindEvents() {\n    this.$container.find('.js-row').each((index, rowEl) => {\n      this.initRow(rowEl);\n    });\n\n    this.$container.on('click', '.js-row-remove-button', e => {\n      e.preventDefault();\n      this.removeRow($(e.currentTarget).closest('.js-row'));\n    });\n\n    const inputSelector = Object.keys(this.inputMap)\n      .map(name => this.inputMap[name].selector)\n      .join(',');\n\n    // Remove any empty rows except the last row\n    this.$container.on('blur', inputSelector, e => {\n      const $row = $(e.currentTarget).closest('.js-row');\n\n      if ($row.is(':not(:last-child)') && !this.checkIfRowTouched($row)) {\n        this.removeRow($row);\n      }\n    });\n\n    // Always make sure there is an empty last row\n    this.$container.on('input trigger-change', inputSelector, () => {\n      const $lastRow = this.$container.find('.js-row').last();\n\n      if (this.checkIfRowTouched($lastRow)) {\n        this.insertRow($lastRow);\n      }\n    });\n  }\n\n  initRow(rowEl) {\n    const $row = $(rowEl);\n\n    setupToggleButtons($row[0]);\n\n    // Reset the resizable textarea\n    $row.find(this.inputMap.secret_value.selector).css('height', '');\n\n    const $environmentSelect = $row.find('.js-variable-environment-toggle');\n    if ($environmentSelect.length) {\n      const createItemDropdown = new CreateItemDropdown({\n        $dropdown: $environmentSelect,\n        defaultToggleLabel: ALL_ENVIRONMENTS_STRING,\n        fieldName: `${this.formField}[variables_attributes][][environment_scope]`,\n        getData: (term, callback) => callback(this.getEnvironmentValues()),\n        createNewItemFromValue: createEnvironmentItem,\n        onSelect: () => {\n          // Refresh the other dropdowns in the variable list\n          // so they have the new value we just picked\n          this.refreshDropdownData();\n\n          $row.find(this.inputMap.environment_scope.selector).trigger('trigger-change');\n        },\n      });\n\n      // Clear out any data that might have been left-over from the row clone\n      createItemDropdown.clearDropdown();\n\n      this.environmentDropdownMap.set($row[0], createItemDropdown);\n    }\n  }\n\n  insertRow($row) {\n    const $rowClone = $row.clone();\n    $rowClone.removeAttr('data-is-persisted');\n\n    // Reset the inputs to their defaults\n    Object.keys(this.inputMap).forEach(name => {\n      const entry = this.inputMap[name];\n      $rowClone.find(entry.selector).val(entry.default);\n    });\n\n    // Close any dropdowns\n    $rowClone.find('.dropdown-menu.show').each((index, $dropdown) => {\n      $dropdown.classList.remove('show');\n    });\n\n    this.initRow($rowClone);\n\n    $row.after($rowClone);\n  }\n\n  removeRow(row) {\n    const $row = $(row);\n    const isPersisted = parseBoolean($row.attr('data-is-persisted'));\n\n    if (isPersisted) {\n      $row.hide();\n      $row\n        // eslint-disable-next-line no-underscore-dangle\n        .find(this.inputMap._destroy.selector)\n        .val(true);\n    } else {\n      $row.remove();\n    }\n\n    // Refresh the other dropdowns in the variable list\n    // so any value with the variable deleted is gone\n    this.refreshDropdownData();\n  }\n\n  checkIfRowTouched($row) {\n    return Object.keys(this.inputMap).some(name => {\n      const entry = this.inputMap[name];\n      const $el = $row.find(entry.selector);\n      return $el.length && $el.val() !== entry.default;\n    });\n  }\n\n  toggleEnableRow(isEnabled = true) {\n    this.$container.find(this.inputMap.key.selector).attr('disabled', !isEnabled);\n    this.$container.find('.js-row-remove-button').attr('disabled', !isEnabled);\n  }\n\n  hideValues() {\n    this.secretValues.updateDom(false);\n  }\n\n  getAllData() {\n    // Ignore the last empty row because we don't want to try persist\n    // a blank variable and run into validation problems.\n    const validRows = this.$container\n      .find('.js-row')\n      .toArray()\n      .slice(0, -1);\n\n    return validRows.map(rowEl => {\n      const resultant = {};\n      Object.keys(this.inputMap).forEach(name => {\n        const entry = this.inputMap[name];\n        const $input = $(rowEl).find(entry.selector);\n        if ($input.length) {\n          resultant[name] = $input.val();\n        }\n      });\n\n      return resultant;\n    });\n  }\n\n  getEnvironmentValues() {\n    const valueMap = this.$container\n      .find(this.inputMap.environment_scope.selector)\n      .toArray()\n      .reduce(\n        (prevValueMap, envInput) => ({\n          ...prevValueMap,\n          [envInput.value]: envInput.value,\n        }),\n        {},\n      );\n\n    return Object.keys(valueMap).map(createEnvironmentItem);\n  }\n\n  refreshDropdownData() {\n    this.$container.find('.js-row').each((index, rowEl) => {\n      const environmentDropdown = this.environmentDropdownMap.get(rowEl);\n      if (environmentDropdown) {\n        environmentDropdown.refreshData();\n      }\n    });\n  }\n}\n","import _ from 'underscore';\nimport axios from '../lib/utils/axios_utils';\nimport { s__ } from '../locale';\nimport Flash from '../flash';\nimport { parseBoolean } from '../lib/utils/common_utils';\nimport statusCodes from '../lib/utils/http_status';\nimport VariableList from './ci_variable_list';\n\nfunction generateErrorBoxContent(errors) {\n  const errorList = [].concat(errors).map(\n    errorString => `\n    <li>\n      ${_.escape(errorString)}\n    </li>\n  `,\n  );\n\n  return `\n    <p>\n      ${s__('CiVariable|Validation failed')}\n    </p>\n    <ul>\n      ${errorList.join('')}\n    </ul>\n  `;\n}\n\n// Used for the variable list on CI/CD projects/groups settings page\nexport default class AjaxVariableList {\n  constructor({ container, saveButton, errorBox, formField = 'variables', saveEndpoint }) {\n    this.container = container;\n    this.saveButton = saveButton;\n    this.errorBox = errorBox;\n    this.saveEndpoint = saveEndpoint;\n\n    this.variableList = new VariableList({\n      container: this.container,\n      formField,\n    });\n\n    this.bindEvents();\n    this.variableList.init();\n  }\n\n  bindEvents() {\n    this.saveButton.addEventListener('click', this.onSaveClicked.bind(this));\n  }\n\n  onSaveClicked() {\n    const loadingIcon = this.saveButton.querySelector('.js-ci-variables-save-loading-icon');\n    loadingIcon.classList.toggle('hide', false);\n    this.errorBox.classList.toggle('hide', true);\n    // We use this to prevent a user from changing a key before we have a chance\n    // to match it up in `updateRowsWithPersistedVariables`\n    this.variableList.toggleEnableRow(false);\n\n    return axios\n      .patch(\n        this.saveEndpoint,\n        {\n          variables_attributes: this.variableList.getAllData(),\n        },\n        {\n          // We want to be able to process the `res.data` from a 400 error response\n          // and print the validation messages such as duplicate variable keys\n          validateStatus: status =>\n            (status >= statusCodes.OK && status < statusCodes.MULTIPLE_CHOICES) ||\n            status === statusCodes.BAD_REQUEST,\n        },\n      )\n      .then(res => {\n        loadingIcon.classList.toggle('hide', true);\n        this.variableList.toggleEnableRow(true);\n\n        if (res.status === statusCodes.OK && res.data) {\n          this.updateRowsWithPersistedVariables(res.data.variables);\n          this.variableList.hideValues();\n        } else if (res.status === statusCodes.BAD_REQUEST) {\n          // Validation failed\n          this.errorBox.innerHTML = generateErrorBoxContent(res.data);\n          this.errorBox.classList.toggle('hide', false);\n        }\n      })\n      .catch(() => {\n        loadingIcon.classList.toggle('hide', true);\n        this.variableList.toggleEnableRow(true);\n        Flash(s__('CiVariable|Error occurred while saving variables'));\n      });\n  }\n\n  updateRowsWithPersistedVariables(persistedVariables = []) {\n    const persistedVariableMap = [].concat(persistedVariables).reduce(\n      (variableMap, variable) => ({\n        ...variableMap,\n        [variable.key]: variable,\n      }),\n      {},\n    );\n\n    this.container.querySelectorAll('.js-row').forEach(row => {\n      // If we submitted a row that was destroyed, remove it so we don't try\n      // to destroy it again which would cause a BE error\n      const destroyInput = row.querySelector('.js-ci-variable-input-destroy');\n      if (parseBoolean(destroyInput.value)) {\n        row.remove();\n        // Update the ID input so any future edits and `_destroy` will apply on the BE\n      } else {\n        const key = row.querySelector('.js-ci-variable-input-key').value;\n        const persistedVariable = persistedVariableMap[key];\n\n        if (persistedVariable) {\n          // eslint-disable-next-line no-param-reassign\n          row.querySelector('.js-ci-variable-input-id').value = persistedVariable.id;\n          row.setAttribute('data-is-persisted', 'true');\n        }\n      }\n    });\n  }\n}\n","/**\n * exports HTTP status codes\n */\n\nconst httpStatusCodes = {\n  ABORTED: 0,\n  OK: 200,\n  CREATED: 201,\n  ACCEPTED: 202,\n  NON_AUTHORITATIVE_INFORMATION: 203,\n  NO_CONTENT: 204,\n  RESET_CONTENT: 205,\n  PARTIAL_CONTENT: 206,\n  MULTI_STATUS: 207,\n  ALREADY_REPORTED: 208,\n  IM_USED: 226,\n  MULTIPLE_CHOICES: 300,\n  BAD_REQUEST: 400,\n  FORBIDDEN: 403,\n  NOT_FOUND: 404,\n  UNPROCESSABLE_ENTITY: 422,\n};\n\nexport const successCodes = [\n  httpStatusCodes.OK,\n  httpStatusCodes.CREATED,\n  httpStatusCodes.ACCEPTED,\n  httpStatusCodes.NON_AUTHORITATIVE_INFORMATION,\n  httpStatusCodes.NO_CONTENT,\n  httpStatusCodes.RESET_CONTENT,\n  httpStatusCodes.PARTIAL_CONTENT,\n  httpStatusCodes.MULTI_STATUS,\n  httpStatusCodes.ALREADY_REPORTED,\n  httpStatusCodes.IM_USED,\n];\n\nexport default httpStatusCodes;\n"],"sourceRoot":""}