{"version":3,"sources":["webpack:////home/git/gitlab/node_modules/cropper/dist/cropper.js","webpack:///./profile/gl_crop.js","webpack:///./profile/profile.js","webpack:///./pages/profiles/index.js"],"names":["__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","__webpack_require__","undefined","$","$window","window","$document","document","location","navigator","ArrayBuffer","Uint8Array","DataView","btoa","CLASS_HIDDEN","EVENT_MOUSE_UP","REGEXP_ACTIONS","REGEXP_DATA_URL","REGEXP_DATA_URL_HEAD","REGEXP_DATA_URL_JPEG","SUPPORT_CANVAS","isFunction","getContext","IS_SAFARI","test","userAgent","vendor","num","Number","min","Math","max","abs","sin","cos","sqrt","round","floor","fromCharCode","String","isNumber","n","isNaN","isUndefined","toArray","obj","offset","args","push","slice","apply","proxy","fn","context","arguments","concat","getCrossOrigin","crossOrigin","getTransform","options","transforms","rotate","scaleX","scaleY","length","join","getRotatedSizes","data","isReversed","newWidth","newHeight","deg","degree","arc","PI","sinArc","cosArc","width","height","aspectRatio","getOrientation","arrayBuffer","orientation","tiffOffset","firstIFDOffset","littleEndian","endianness","app1Start","ifdStart","i","dataView","byteLength","getUint8","start","str","getStringFromCharCode","getUint16","getUint32","setUint16","Cropper","element","this","$element","extend","DEFAULTS","isPlainObject","isLoaded","isBuilt","isCompleted","isRotated","isCropped","isDisabled","isReplaced","isLimited","wheeling","isImg","originalUrl","canvas","cropBox","init","prototype","constructor","url","$this","is","attr","prop","toDataURL","load","trigger","type","e","Event","read","xhr","one","build","isDefaultPrevented","image","checkOrientation","clone","dataURL","base64","replace","binary","atob","charCodeAt","dataURLToArrayBuffer","XMLHttpRequest","onerror","onabort","onload","response","open","responseType","send","arrayBufferToDataURL","rotatable","scalable","crossOriginUrl","$clone","checkCrossOrigin","parts","match","protocol","hostname","port","isCrossOriginURL","timestamp","Date","getTime","indexOf","addTimestamp","complete","stop","addClass","insertAfter","$image","off","callback","newImage","naturalWidth","naturalHeight","createElement","src","getImageSize","remove","$cropper","$cropBox","$face","unbuild","$container","parent","TEMPLATE","$canvas","find","append","$dragBox","$viewBox","after","removeClass","initPreview","bind","NaN","viewMode","autoCrop","modal","guides","center","cropBoxMovable","highlight","background","cropBoxResizable","setDragMode","dragMode","render","setData","built","setTimeout","initialImage","initialCanvas","initialCropBox","container","unbind","resetPreview","$preview","initContainer","initCanvas","initCropBox","renderCanvas","renderCropBox","css","minContainerWidth","minContainerHeight","containerWidth","containerHeight","imageNaturalWidth","imageNaturalHeight","is90Degree","canvasWidth","canvasHeight","oldLeft","left","oldTop","top","limitCanvas","isSizeLimited","isPositionLimited","minCanvasWidth","minCanvasHeight","newCanvasLeft","newCanvasTop","minWidth","minHeight","maxWidth","Infinity","maxHeight","minLeft","minTop","maxLeft","maxTop","isChanged","rotated","renderImage","limitCropBox","output","reversed","marginLeft","marginTop","transform","autoCropArea","minCropBoxWidth","minCropBoxHeight","maxCropBoxWidth","maxCropBoxHeight","movable","preview","getData","$clone2","html","each","removeData","cropBoxWidth","cropBoxHeight","originalWidth","originalHeight","ratio","cropstart","on","cropmove","cropend","crop","zoom","cropStart","zoomable","zoomOnWheel","wheel","toggleDragModeOnDblclick","dblclick","_cropMove","cropMove","_cropEnd","cropEnd","responsive","_resize","resize","canvasData","cropBoxData","restore","getCanvasData","getCropBoxData","setCanvasData","setCropBoxData","hasClass","event","originalEvent","wheelZoomRatio","delta","preventDefault","deltaY","wheelDelta","detail","touchesLength","action","touches","zoomOnTouch","startX2","pageX","startY2","pageY","target","cropping","startX","startY","endX2","endY2","endX","endY","change","shiftKey","toggleClass","range","x1","y1","x2","y2","z1","right","bottom","renderable","limited","x","y","X","Y","move","reset","clear","onlyColorChanged","add","enable","disable","destroy","offsetX","offsetY","moveTo","_event","zoomTo","oldRatio","touch","rotateTo","scale","isRounded","isScaled","call","getContainerData","getImageData","isWidthChanged","isHeightChanged","getCroppedCanvas","scaledWidth","scaledHeight","scaledRatio","fillColor","fillStyle","fillRect","drawImage","srcWidth","srcHeight","dstX","dstY","dstWidth","dstHeight","source","translateX","translateY","advanced","save","translate","getSourceCanvas","sourceWidth","sourceHeight","params","srcX","srcY","setAspectRatio","mode","croppable","setDefaults","other","cropper","option","result","Constructor","noConflict","exports","module","FILENAMEREGEX","GitLabCrop","gl","input","_ref","filename","previewImage","modalCrop","pickImageEl","uploadImageBtn","modalCropImg","_ref$exportWidth","exportWidth","_ref$exportHeight","exportHeight","_ref$cropBoxWidth","_ref$cropBoxHeight","_classCallCheck","onUploadImageBtnClick","onModalHide","onModalShow","onPickImageClick","fileInput","_","isString","form","parents","getElement","cropActionsBtn","bindEvents","key","value","selector","_this","onFileInputChange","onActionBtnClick","croppedImageBlob","_this2","setBlob","setPreview","val","btn","method","readFile","reader","FileReader","readAsDataURL","files","array","len","split","Blob","text","dataURLtoBlob","glCrop","opts","Profile","profile_classCallCheck","onSubmitForm","setRepoRadio","initAvatarGlCrop","avatarGlCrop","submitForm","submit","saveForm","self","formData","FormData","get","avatarBlob","getBlob","delete","axios","then","_ref2","updateHeaderAvatar","flash","message","scrollTo","catch","error","multiEditRadios","parseBoolean","newRepoActivated","filter","addEventListener","$title","comment"],"mappings":"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","file":"commons~pages.profiles~pages.profiles.accounts.show~pages.profiles.index~pages.profiles.keys~pages.p~f2a26ee8.2461c9cf.chunk.js","sourcesContent":["/*!\n * Cropper v2.3.0\n * https://github.com/fengyuanchen/cropper\n *\n * Copyright (c) 2014-2016 Fengyuan Chen and contributors\n * Released under the MIT license\n *\n * Date: 2016-02-22T02:13:13.332Z\n */\n\n(function (factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as anonymous module.\n    define(['jquery'], factory);\n  } else if (typeof exports === 'object') {\n    // Node / CommonJS\n    factory(require('jquery'));\n  } else {\n    // Browser globals.\n    factory(jQuery);\n  }\n})(function ($) {\n\n  'use strict';\n\n  // Globals\n  var $window = $(window);\n  var $document = $(document);\n  var location = window.location;\n  var navigator = window.navigator;\n  var ArrayBuffer = window.ArrayBuffer;\n  var Uint8Array = window.Uint8Array;\n  var DataView = window.DataView;\n  var btoa = window.btoa;\n\n  // Constants\n  var NAMESPACE = 'cropper';\n\n  // Classes\n  var CLASS_MODAL = 'cropper-modal';\n  var CLASS_HIDE = 'cropper-hide';\n  var CLASS_HIDDEN = 'cropper-hidden';\n  var CLASS_INVISIBLE = 'cropper-invisible';\n  var CLASS_MOVE = 'cropper-move';\n  var CLASS_CROP = 'cropper-crop';\n  var CLASS_DISABLED = 'cropper-disabled';\n  var CLASS_BG = 'cropper-bg';\n\n  // Events\n  var EVENT_MOUSE_DOWN = 'mousedown touchstart pointerdown MSPointerDown';\n  var EVENT_MOUSE_MOVE = 'mousemove touchmove pointermove MSPointerMove';\n  var EVENT_MOUSE_UP = 'mouseup touchend touchcancel pointerup pointercancel MSPointerUp MSPointerCancel';\n  var EVENT_WHEEL = 'wheel mousewheel DOMMouseScroll';\n  var EVENT_DBLCLICK = 'dblclick';\n  var EVENT_LOAD = 'load.' + NAMESPACE;\n  var EVENT_ERROR = 'error.' + NAMESPACE;\n  var EVENT_RESIZE = 'resize.' + NAMESPACE; // Bind to window with namespace\n  var EVENT_BUILD = 'build.' + NAMESPACE;\n  var EVENT_BUILT = 'built.' + NAMESPACE;\n  var EVENT_CROP_START = 'cropstart.' + NAMESPACE;\n  var EVENT_CROP_MOVE = 'cropmove.' + NAMESPACE;\n  var EVENT_CROP_END = 'cropend.' + NAMESPACE;\n  var EVENT_CROP = 'crop.' + NAMESPACE;\n  var EVENT_ZOOM = 'zoom.' + NAMESPACE;\n\n  // RegExps\n  var REGEXP_ACTIONS = /e|w|s|n|se|sw|ne|nw|all|crop|move|zoom/;\n  var REGEXP_DATA_URL = /^data\\:/;\n  var REGEXP_DATA_URL_HEAD = /^data\\:([^\\;]+)\\;base64,/;\n  var REGEXP_DATA_URL_JPEG = /^data\\:image\\/jpeg.*;base64,/;\n\n  // Data keys\n  var DATA_PREVIEW = 'preview';\n  var DATA_ACTION = 'action';\n\n  // Actions\n  var ACTION_EAST = 'e';\n  var ACTION_WEST = 'w';\n  var ACTION_SOUTH = 's';\n  var ACTION_NORTH = 'n';\n  var ACTION_SOUTH_EAST = 'se';\n  var ACTION_SOUTH_WEST = 'sw';\n  var ACTION_NORTH_EAST = 'ne';\n  var ACTION_NORTH_WEST = 'nw';\n  var ACTION_ALL = 'all';\n  var ACTION_CROP = 'crop';\n  var ACTION_MOVE = 'move';\n  var ACTION_ZOOM = 'zoom';\n  var ACTION_NONE = 'none';\n\n  // Supports\n  var SUPPORT_CANVAS = $.isFunction($('<canvas>')[0].getContext);\n  var IS_SAFARI = navigator && /safari/i.test(navigator.userAgent) && /apple computer/i.test(navigator.vendor);\n\n  // Maths\n  var num = Number;\n  var min = Math.min;\n  var max = Math.max;\n  var abs = Math.abs;\n  var sin = Math.sin;\n  var cos = Math.cos;\n  var sqrt = Math.sqrt;\n  var round = Math.round;\n  var floor = Math.floor;\n\n  // Utilities\n  var fromCharCode = String.fromCharCode;\n\n  function isNumber(n) {\n    return typeof n === 'number' && !isNaN(n);\n  }\n\n  function isUndefined(n) {\n    return typeof n === 'undefined';\n  }\n\n  function toArray(obj, offset) {\n    var args = [];\n\n    // This is necessary for IE8\n    if (isNumber(offset)) {\n      args.push(offset);\n    }\n\n    return args.slice.apply(obj, args);\n  }\n\n  // Custom proxy to avoid jQuery's guid\n  function proxy(fn, context) {\n    var args = toArray(arguments, 2);\n\n    return function () {\n      return fn.apply(context, args.concat(toArray(arguments)));\n    };\n  }\n\n  function isCrossOriginURL(url) {\n    var parts = url.match(/^(https?:)\\/\\/([^\\:\\/\\?#]+):?(\\d*)/i);\n\n    return parts && (\n      parts[1] !== location.protocol ||\n      parts[2] !== location.hostname ||\n      parts[3] !== location.port\n    );\n  }\n\n  function addTimestamp(url) {\n    var timestamp = 'timestamp=' + (new Date()).getTime();\n\n    return (url + (url.indexOf('?') === -1 ? '?' : '&') + timestamp);\n  }\n\n  function getCrossOrigin(crossOrigin) {\n    return crossOrigin ? ' crossOrigin=\"' + crossOrigin + '\"' : '';\n  }\n\n  function getImageSize(image, callback) {\n    var newImage;\n\n    // Modern browsers (ignore Safari, #120 & #509)\n    if (image.naturalWidth && !IS_SAFARI) {\n      return callback(image.naturalWidth, image.naturalHeight);\n    }\n\n    // IE8: Don't use `new Image()` here (#319)\n    newImage = document.createElement('img');\n\n    newImage.onload = function () {\n      callback(this.width, this.height);\n    };\n\n    newImage.src = image.src;\n  }\n\n  function getTransform(options) {\n    var transforms = [];\n    var rotate = options.rotate;\n    var scaleX = options.scaleX;\n    var scaleY = options.scaleY;\n\n    if (isNumber(rotate)) {\n      transforms.push('rotate(' + rotate + 'deg)');\n    }\n\n    if (isNumber(scaleX) && isNumber(scaleY)) {\n      transforms.push('scale(' + scaleX + ',' + scaleY + ')');\n    }\n\n    return transforms.length ? transforms.join(' ') : 'none';\n  }\n\n  function getRotatedSizes(data, isReversed) {\n    var deg = abs(data.degree) % 180;\n    var arc = (deg > 90 ? (180 - deg) : deg) * Math.PI / 180;\n    var sinArc = sin(arc);\n    var cosArc = cos(arc);\n    var width = data.width;\n    var height = data.height;\n    var aspectRatio = data.aspectRatio;\n    var newWidth;\n    var newHeight;\n\n    if (!isReversed) {\n      newWidth = width * cosArc + height * sinArc;\n      newHeight = width * sinArc + height * cosArc;\n    } else {\n      newWidth = width / (cosArc + sinArc / aspectRatio);\n      newHeight = newWidth / aspectRatio;\n    }\n\n    return {\n      width: newWidth,\n      height: newHeight\n    };\n  }\n\n  function getSourceCanvas(image, data) {\n    var canvas = $('<canvas>')[0];\n    var context = canvas.getContext('2d');\n    var dstX = 0;\n    var dstY = 0;\n    var dstWidth = data.naturalWidth;\n    var dstHeight = data.naturalHeight;\n    var rotate = data.rotate;\n    var scaleX = data.scaleX;\n    var scaleY = data.scaleY;\n    var scalable = isNumber(scaleX) && isNumber(scaleY) && (scaleX !== 1 || scaleY !== 1);\n    var rotatable = isNumber(rotate) && rotate !== 0;\n    var advanced = rotatable || scalable;\n    var canvasWidth = dstWidth * abs(scaleX || 1);\n    var canvasHeight = dstHeight * abs(scaleY || 1);\n    var translateX;\n    var translateY;\n    var rotated;\n\n    if (scalable) {\n      translateX = canvasWidth / 2;\n      translateY = canvasHeight / 2;\n    }\n\n    if (rotatable) {\n      rotated = getRotatedSizes({\n        width: canvasWidth,\n        height: canvasHeight,\n        degree: rotate\n      });\n\n      canvasWidth = rotated.width;\n      canvasHeight = rotated.height;\n      translateX = canvasWidth / 2;\n      translateY = canvasHeight / 2;\n    }\n\n    canvas.width = canvasWidth;\n    canvas.height = canvasHeight;\n\n    if (advanced) {\n      dstX = -dstWidth / 2;\n      dstY = -dstHeight / 2;\n\n      context.save();\n      context.translate(translateX, translateY);\n    }\n\n    if (rotatable) {\n      context.rotate(rotate * Math.PI / 180);\n    }\n\n    // Should call `scale` after rotated\n    if (scalable) {\n      context.scale(scaleX, scaleY);\n    }\n\n    context.drawImage(image, floor(dstX), floor(dstY), floor(dstWidth), floor(dstHeight));\n\n    if (advanced) {\n      context.restore();\n    }\n\n    return canvas;\n  }\n\n  function getTouchesCenter(touches) {\n    var length = touches.length;\n    var pageX = 0;\n    var pageY = 0;\n\n    if (length) {\n      $.each(touches, function (i, touch) {\n        pageX += touch.pageX;\n        pageY += touch.pageY;\n      });\n\n      pageX /= length;\n      pageY /= length;\n    }\n\n    return {\n      pageX: pageX,\n      pageY: pageY\n    };\n  }\n\n  function getStringFromCharCode(dataView, start, length) {\n    var str = '';\n    var i;\n\n    for (i = start, length += start; i < length; i++) {\n      str += fromCharCode(dataView.getUint8(i));\n    }\n\n    return str;\n  }\n\n  function getOrientation(arrayBuffer) {\n    var dataView = new DataView(arrayBuffer);\n    var length = dataView.byteLength;\n    var orientation;\n    var exifIDCode;\n    var tiffOffset;\n    var firstIFDOffset;\n    var littleEndian;\n    var endianness;\n    var app1Start;\n    var ifdStart;\n    var offset;\n    var i;\n\n    // Only handle JPEG image (start by 0xFFD8)\n    if (dataView.getUint8(0) === 0xFF && dataView.getUint8(1) === 0xD8) {\n      offset = 2;\n\n      while (offset < length) {\n        if (dataView.getUint8(offset) === 0xFF && dataView.getUint8(offset + 1) === 0xE1) {\n          app1Start = offset;\n          break;\n        }\n\n        offset++;\n      }\n    }\n\n    if (app1Start) {\n      exifIDCode = app1Start + 4;\n      tiffOffset = app1Start + 10;\n\n      if (getStringFromCharCode(dataView, exifIDCode, 4) === 'Exif') {\n        endianness = dataView.getUint16(tiffOffset);\n        littleEndian = endianness === 0x4949;\n\n        if (littleEndian || endianness === 0x4D4D /* bigEndian */) {\n          if (dataView.getUint16(tiffOffset + 2, littleEndian) === 0x002A) {\n            firstIFDOffset = dataView.getUint32(tiffOffset + 4, littleEndian);\n\n            if (firstIFDOffset >= 0x00000008) {\n              ifdStart = tiffOffset + firstIFDOffset;\n            }\n          }\n        }\n      }\n    }\n\n    if (ifdStart) {\n      length = dataView.getUint16(ifdStart, littleEndian);\n\n      for (i = 0; i < length; i++) {\n        offset = ifdStart + i * 12 + 2;\n\n        if (dataView.getUint16(offset, littleEndian) === 0x0112 /* Orientation */) {\n\n          // 8 is the offset of the current tag's value\n          offset += 8;\n\n          // Get the original orientation value\n          orientation = dataView.getUint16(offset, littleEndian);\n\n          // Override the orientation with its default value for Safari (#120)\n          if (IS_SAFARI) {\n            dataView.setUint16(offset, 1, littleEndian);\n          }\n\n          break;\n        }\n      }\n    }\n\n    return orientation;\n  }\n\n  function dataURLToArrayBuffer(dataURL) {\n    var base64 = dataURL.replace(REGEXP_DATA_URL_HEAD, '');\n    var binary = atob(base64);\n    var length = binary.length;\n    var arrayBuffer = new ArrayBuffer(length);\n    var dataView = new Uint8Array(arrayBuffer);\n    var i;\n\n    for (i = 0; i < length; i++) {\n      dataView[i] = binary.charCodeAt(i);\n    }\n\n    return arrayBuffer;\n  }\n\n  // Only available for JPEG image\n  function arrayBufferToDataURL(arrayBuffer) {\n    var dataView = new Uint8Array(arrayBuffer);\n    var length = dataView.length;\n    var base64 = '';\n    var i;\n\n    for (i = 0; i < length; i++) {\n      base64 += fromCharCode(dataView[i]);\n    }\n\n    return 'data:image/jpeg;base64,' + btoa(base64);\n  }\n\n  function Cropper(element, options) {\n    this.$element = $(element);\n    this.options = $.extend({}, Cropper.DEFAULTS, $.isPlainObject(options) && options);\n    this.isLoaded = false;\n    this.isBuilt = false;\n    this.isCompleted = false;\n    this.isRotated = false;\n    this.isCropped = false;\n    this.isDisabled = false;\n    this.isReplaced = false;\n    this.isLimited = false;\n    this.wheeling = false;\n    this.isImg = false;\n    this.originalUrl = '';\n    this.canvas = null;\n    this.cropBox = null;\n    this.init();\n  }\n\n  Cropper.prototype = {\n    constructor: Cropper,\n\n    init: function () {\n      var $this = this.$element;\n      var url;\n\n      if ($this.is('img')) {\n        this.isImg = true;\n\n        // Should use `$.fn.attr` here. e.g.: \"img/picture.jpg\"\n        this.originalUrl = url = $this.attr('src');\n\n        // Stop when it's a blank image\n        if (!url) {\n          return;\n        }\n\n        // Should use `$.fn.prop` here. e.g.: \"http://example.com/img/picture.jpg\"\n        url = $this.prop('src');\n      } else if ($this.is('canvas') && SUPPORT_CANVAS) {\n        url = $this[0].toDataURL();\n      }\n\n      this.load(url);\n    },\n\n    // A shortcut for triggering custom events\n    trigger: function (type, data) {\n      var e = $.Event(type, data);\n\n      this.$element.trigger(e);\n\n      return e;\n    },\n\n    load: function (url) {\n      var options = this.options;\n      var $this = this.$element;\n      var read;\n      var xhr;\n\n      if (!url) {\n        return;\n      }\n\n      // Trigger build event first\n      $this.one(EVENT_BUILD, options.build);\n\n      if (this.trigger(EVENT_BUILD).isDefaultPrevented()) {\n        return;\n      }\n\n      this.url = url;\n      this.image = {};\n\n      if (!options.checkOrientation || !ArrayBuffer) {\n        return this.clone();\n      }\n\n      read = $.proxy(this.read, this);\n\n      // XMLHttpRequest disallows to open a Data URL in some browsers like IE11 and Safari\n      if (REGEXP_DATA_URL.test(url)) {\n        return REGEXP_DATA_URL_JPEG.test(url) ?\n          read(dataURLToArrayBuffer(url)) :\n          this.clone();\n      }\n\n      xhr = new XMLHttpRequest();\n\n      xhr.onerror = xhr.onabort = $.proxy(function () {\n        this.clone();\n      }, this);\n\n      xhr.onload = function () {\n        read(this.response);\n      };\n\n      xhr.open('get', url);\n      xhr.responseType = 'arraybuffer';\n      xhr.send();\n    },\n\n    read: function (arrayBuffer) {\n      var options = this.options;\n      var orientation = getOrientation(arrayBuffer);\n      var image = this.image;\n      var rotate;\n      var scaleX;\n      var scaleY;\n\n      if (orientation > 1) {\n        this.url = arrayBufferToDataURL(arrayBuffer);\n\n        switch (orientation) {\n\n          // flip horizontal\n          case 2:\n            scaleX = -1;\n            break;\n\n          // rotate left 180°\n          case 3:\n            rotate = -180;\n            break;\n\n          // flip vertical\n          case 4:\n            scaleY = -1;\n            break;\n\n          // flip vertical + rotate right 90°\n          case 5:\n            rotate = 90;\n            scaleY = -1;\n            break;\n\n          // rotate right 90°\n          case 6:\n            rotate = 90;\n            break;\n\n          // flip horizontal + rotate right 90°\n          case 7:\n            rotate = 90;\n            scaleX = -1;\n            break;\n\n          // rotate left 90°\n          case 8:\n            rotate = -90;\n            break;\n        }\n      }\n\n      if (options.rotatable) {\n        image.rotate = rotate;\n      }\n\n      if (options.scalable) {\n        image.scaleX = scaleX;\n        image.scaleY = scaleY;\n      }\n\n      this.clone();\n    },\n\n    clone: function () {\n      var options = this.options;\n      var $this = this.$element;\n      var url = this.url;\n      var crossOrigin = '';\n      var crossOriginUrl;\n      var $clone;\n\n      if (options.checkCrossOrigin && isCrossOriginURL(url)) {\n        crossOrigin = $this.prop('crossOrigin');\n\n        if (crossOrigin) {\n          crossOriginUrl = url;\n        } else {\n          crossOrigin = 'anonymous';\n\n          // Bust cache (#148) when there is not a \"crossOrigin\" property\n          crossOriginUrl = addTimestamp(url);\n        }\n      }\n\n      this.crossOrigin = crossOrigin;\n      this.crossOriginUrl = crossOriginUrl;\n      this.$clone = $clone = $('<img' + getCrossOrigin(crossOrigin) + ' src=\"' + (crossOriginUrl || url) + '\">');\n\n      if (this.isImg) {\n        if ($this[0].complete) {\n          this.start();\n        } else {\n          $this.one(EVENT_LOAD, $.proxy(this.start, this));\n        }\n      } else {\n        $clone.\n          one(EVENT_LOAD, $.proxy(this.start, this)).\n          one(EVENT_ERROR, $.proxy(this.stop, this)).\n          addClass(CLASS_HIDE).\n          insertAfter($this);\n      }\n    },\n\n    start: function () {\n      var $image = this.$element;\n      var $clone = this.$clone;\n\n      if (!this.isImg) {\n        $clone.off(EVENT_ERROR, this.stop);\n        $image = $clone;\n      }\n\n      getImageSize($image[0], $.proxy(function (naturalWidth, naturalHeight) {\n        $.extend(this.image, {\n          naturalWidth: naturalWidth,\n          naturalHeight: naturalHeight,\n          aspectRatio: naturalWidth / naturalHeight\n        });\n\n        this.isLoaded = true;\n        this.build();\n      }, this));\n    },\n\n    stop: function () {\n      this.$clone.remove();\n      this.$clone = null;\n    },\n\n    build: function () {\n      var options = this.options;\n      var $this = this.$element;\n      var $clone = this.$clone;\n      var $cropper;\n      var $cropBox;\n      var $face;\n\n      if (!this.isLoaded) {\n        return;\n      }\n\n      // Unbuild first when replace\n      if (this.isBuilt) {\n        this.unbuild();\n      }\n\n      // Create cropper elements\n      this.$container = $this.parent();\n      this.$cropper = $cropper = $(Cropper.TEMPLATE);\n      this.$canvas = $cropper.find('.cropper-canvas').append($clone);\n      this.$dragBox = $cropper.find('.cropper-drag-box');\n      this.$cropBox = $cropBox = $cropper.find('.cropper-crop-box');\n      this.$viewBox = $cropper.find('.cropper-view-box');\n      this.$face = $face = $cropBox.find('.cropper-face');\n\n      // Hide the original image\n      $this.addClass(CLASS_HIDDEN).after($cropper);\n\n      // Show the clone image if is hidden\n      if (!this.isImg) {\n        $clone.removeClass(CLASS_HIDE);\n      }\n\n      this.initPreview();\n      this.bind();\n\n      options.aspectRatio = max(0, options.aspectRatio) || NaN;\n      options.viewMode = max(0, min(3, round(options.viewMode))) || 0;\n\n      if (options.autoCrop) {\n        this.isCropped = true;\n\n        if (options.modal) {\n          this.$dragBox.addClass(CLASS_MODAL);\n        }\n      } else {\n        $cropBox.addClass(CLASS_HIDDEN);\n      }\n\n      if (!options.guides) {\n        $cropBox.find('.cropper-dashed').addClass(CLASS_HIDDEN);\n      }\n\n      if (!options.center) {\n        $cropBox.find('.cropper-center').addClass(CLASS_HIDDEN);\n      }\n\n      if (options.cropBoxMovable) {\n        $face.addClass(CLASS_MOVE).data(DATA_ACTION, ACTION_ALL);\n      }\n\n      if (!options.highlight) {\n        $face.addClass(CLASS_INVISIBLE);\n      }\n\n      if (options.background) {\n        $cropper.addClass(CLASS_BG);\n      }\n\n      if (!options.cropBoxResizable) {\n        $cropBox.find('.cropper-line, .cropper-point').addClass(CLASS_HIDDEN);\n      }\n\n      this.setDragMode(options.dragMode);\n      this.render();\n      this.isBuilt = true;\n      this.setData(options.data);\n      $this.one(EVENT_BUILT, options.built);\n\n      // Trigger the built event asynchronously to keep `data('cropper')` is defined\n      setTimeout($.proxy(function () {\n        this.trigger(EVENT_BUILT);\n        this.isCompleted = true;\n      }, this), 0);\n    },\n\n    unbuild: function () {\n      if (!this.isBuilt) {\n        return;\n      }\n\n      this.isBuilt = false;\n      this.isCompleted = false;\n      this.initialImage = null;\n\n      // Clear `initialCanvas` is necessary when replace\n      this.initialCanvas = null;\n      this.initialCropBox = null;\n      this.container = null;\n      this.canvas = null;\n\n      // Clear `cropBox` is necessary when replace\n      this.cropBox = null;\n      this.unbind();\n\n      this.resetPreview();\n      this.$preview = null;\n\n      this.$viewBox = null;\n      this.$cropBox = null;\n      this.$dragBox = null;\n      this.$canvas = null;\n      this.$container = null;\n\n      this.$cropper.remove();\n      this.$cropper = null;\n    },\n\n    render: function () {\n      this.initContainer();\n      this.initCanvas();\n      this.initCropBox();\n\n      this.renderCanvas();\n\n      if (this.isCropped) {\n        this.renderCropBox();\n      }\n    },\n\n    initContainer: function () {\n      var options = this.options;\n      var $this = this.$element;\n      var $container = this.$container;\n      var $cropper = this.$cropper;\n\n      $cropper.addClass(CLASS_HIDDEN);\n      $this.removeClass(CLASS_HIDDEN);\n\n      $cropper.css((this.container = {\n        width: max($container.width(), num(options.minContainerWidth) || 200),\n        height: max($container.height(), num(options.minContainerHeight) || 100)\n      }));\n\n      $this.addClass(CLASS_HIDDEN);\n      $cropper.removeClass(CLASS_HIDDEN);\n    },\n\n    // Canvas (image wrapper)\n    initCanvas: function () {\n      var viewMode = this.options.viewMode;\n      var container = this.container;\n      var containerWidth = container.width;\n      var containerHeight = container.height;\n      var image = this.image;\n      var imageNaturalWidth = image.naturalWidth;\n      var imageNaturalHeight = image.naturalHeight;\n      var is90Degree = abs(image.rotate) === 90;\n      var naturalWidth = is90Degree ? imageNaturalHeight : imageNaturalWidth;\n      var naturalHeight = is90Degree ? imageNaturalWidth : imageNaturalHeight;\n      var aspectRatio = naturalWidth / naturalHeight;\n      var canvasWidth = containerWidth;\n      var canvasHeight = containerHeight;\n      var canvas;\n\n      if (containerHeight * aspectRatio > containerWidth) {\n        if (viewMode === 3) {\n          canvasWidth = containerHeight * aspectRatio;\n        } else {\n          canvasHeight = containerWidth / aspectRatio;\n        }\n      } else {\n        if (viewMode === 3) {\n          canvasHeight = containerWidth / aspectRatio;\n        } else {\n          canvasWidth = containerHeight * aspectRatio;\n        }\n      }\n\n      canvas = {\n        naturalWidth: naturalWidth,\n        naturalHeight: naturalHeight,\n        aspectRatio: aspectRatio,\n        width: canvasWidth,\n        height: canvasHeight\n      };\n\n      canvas.oldLeft = canvas.left = (containerWidth - canvasWidth) / 2;\n      canvas.oldTop = canvas.top = (containerHeight - canvasHeight) / 2;\n\n      this.canvas = canvas;\n      this.isLimited = (viewMode === 1 || viewMode === 2);\n      this.limitCanvas(true, true);\n      this.initialImage = $.extend({}, image);\n      this.initialCanvas = $.extend({}, canvas);\n    },\n\n    limitCanvas: function (isSizeLimited, isPositionLimited) {\n      var options = this.options;\n      var viewMode = options.viewMode;\n      var container = this.container;\n      var containerWidth = container.width;\n      var containerHeight = container.height;\n      var canvas = this.canvas;\n      var aspectRatio = canvas.aspectRatio;\n      var cropBox = this.cropBox;\n      var isCropped = this.isCropped && cropBox;\n      var minCanvasWidth;\n      var minCanvasHeight;\n      var newCanvasLeft;\n      var newCanvasTop;\n\n      if (isSizeLimited) {\n        minCanvasWidth = num(options.minCanvasWidth) || 0;\n        minCanvasHeight = num(options.minCanvasHeight) || 0;\n\n        if (viewMode) {\n          if (viewMode > 1) {\n            minCanvasWidth = max(minCanvasWidth, containerWidth);\n            minCanvasHeight = max(minCanvasHeight, containerHeight);\n\n            if (viewMode === 3) {\n              if (minCanvasHeight * aspectRatio > minCanvasWidth) {\n                minCanvasWidth = minCanvasHeight * aspectRatio;\n              } else {\n                minCanvasHeight = minCanvasWidth / aspectRatio;\n              }\n            }\n          } else {\n            if (minCanvasWidth) {\n              minCanvasWidth = max(minCanvasWidth, isCropped ? cropBox.width : 0);\n            } else if (minCanvasHeight) {\n              minCanvasHeight = max(minCanvasHeight, isCropped ? cropBox.height : 0);\n            } else if (isCropped) {\n              minCanvasWidth = cropBox.width;\n              minCanvasHeight = cropBox.height;\n\n              if (minCanvasHeight * aspectRatio > minCanvasWidth) {\n                minCanvasWidth = minCanvasHeight * aspectRatio;\n              } else {\n                minCanvasHeight = minCanvasWidth / aspectRatio;\n              }\n            }\n          }\n        }\n\n        if (minCanvasWidth && minCanvasHeight) {\n          if (minCanvasHeight * aspectRatio > minCanvasWidth) {\n            minCanvasHeight = minCanvasWidth / aspectRatio;\n          } else {\n            minCanvasWidth = minCanvasHeight * aspectRatio;\n          }\n        } else if (minCanvasWidth) {\n          minCanvasHeight = minCanvasWidth / aspectRatio;\n        } else if (minCanvasHeight) {\n          minCanvasWidth = minCanvasHeight * aspectRatio;\n        }\n\n        canvas.minWidth = minCanvasWidth;\n        canvas.minHeight = minCanvasHeight;\n        canvas.maxWidth = Infinity;\n        canvas.maxHeight = Infinity;\n      }\n\n      if (isPositionLimited) {\n        if (viewMode) {\n          newCanvasLeft = containerWidth - canvas.width;\n          newCanvasTop = containerHeight - canvas.height;\n\n          canvas.minLeft = min(0, newCanvasLeft);\n          canvas.minTop = min(0, newCanvasTop);\n          canvas.maxLeft = max(0, newCanvasLeft);\n          canvas.maxTop = max(0, newCanvasTop);\n\n          if (isCropped && this.isLimited) {\n            canvas.minLeft = min(\n              cropBox.left,\n              cropBox.left + cropBox.width - canvas.width\n            );\n            canvas.minTop = min(\n              cropBox.top,\n              cropBox.top + cropBox.height - canvas.height\n            );\n            canvas.maxLeft = cropBox.left;\n            canvas.maxTop = cropBox.top;\n\n            if (viewMode === 2) {\n              if (canvas.width >= containerWidth) {\n                canvas.minLeft = min(0, newCanvasLeft);\n                canvas.maxLeft = max(0, newCanvasLeft);\n              }\n\n              if (canvas.height >= containerHeight) {\n                canvas.minTop = min(0, newCanvasTop);\n                canvas.maxTop = max(0, newCanvasTop);\n              }\n            }\n          }\n        } else {\n          canvas.minLeft = -canvas.width;\n          canvas.minTop = -canvas.height;\n          canvas.maxLeft = containerWidth;\n          canvas.maxTop = containerHeight;\n        }\n      }\n    },\n\n    renderCanvas: function (isChanged) {\n      var canvas = this.canvas;\n      var image = this.image;\n      var rotate = image.rotate;\n      var naturalWidth = image.naturalWidth;\n      var naturalHeight = image.naturalHeight;\n      var aspectRatio;\n      var rotated;\n\n      if (this.isRotated) {\n        this.isRotated = false;\n\n        // Computes rotated sizes with image sizes\n        rotated = getRotatedSizes({\n          width: image.width,\n          height: image.height,\n          degree: rotate\n        });\n\n        aspectRatio = rotated.width / rotated.height;\n\n        if (aspectRatio !== canvas.aspectRatio) {\n          canvas.left -= (rotated.width - canvas.width) / 2;\n          canvas.top -= (rotated.height - canvas.height) / 2;\n          canvas.width = rotated.width;\n          canvas.height = rotated.height;\n          canvas.aspectRatio = aspectRatio;\n          canvas.naturalWidth = naturalWidth;\n          canvas.naturalHeight = naturalHeight;\n\n          // Computes rotated sizes with natural image sizes\n          if (rotate % 180) {\n            rotated = getRotatedSizes({\n              width: naturalWidth,\n              height: naturalHeight,\n              degree: rotate\n            });\n\n            canvas.naturalWidth = rotated.width;\n            canvas.naturalHeight = rotated.height;\n          }\n\n          this.limitCanvas(true, false);\n        }\n      }\n\n      if (canvas.width > canvas.maxWidth || canvas.width < canvas.minWidth) {\n        canvas.left = canvas.oldLeft;\n      }\n\n      if (canvas.height > canvas.maxHeight || canvas.height < canvas.minHeight) {\n        canvas.top = canvas.oldTop;\n      }\n\n      canvas.width = min(max(canvas.width, canvas.minWidth), canvas.maxWidth);\n      canvas.height = min(max(canvas.height, canvas.minHeight), canvas.maxHeight);\n\n      this.limitCanvas(false, true);\n\n      canvas.oldLeft = canvas.left = min(max(canvas.left, canvas.minLeft), canvas.maxLeft);\n      canvas.oldTop = canvas.top = min(max(canvas.top, canvas.minTop), canvas.maxTop);\n\n      this.$canvas.css({\n        width: canvas.width,\n        height: canvas.height,\n        left: canvas.left,\n        top: canvas.top\n      });\n\n      this.renderImage();\n\n      if (this.isCropped && this.isLimited) {\n        this.limitCropBox(true, true);\n      }\n\n      if (isChanged) {\n        this.output();\n      }\n    },\n\n    renderImage: function (isChanged) {\n      var canvas = this.canvas;\n      var image = this.image;\n      var reversed;\n\n      if (image.rotate) {\n        reversed = getRotatedSizes({\n          width: canvas.width,\n          height: canvas.height,\n          degree: image.rotate,\n          aspectRatio: image.aspectRatio\n        }, true);\n      }\n\n      $.extend(image, reversed ? {\n        width: reversed.width,\n        height: reversed.height,\n        left: (canvas.width - reversed.width) / 2,\n        top: (canvas.height - reversed.height) / 2\n      } : {\n        width: canvas.width,\n        height: canvas.height,\n        left: 0,\n        top: 0\n      });\n\n      this.$clone.css({\n        width: image.width,\n        height: image.height,\n        marginLeft: image.left,\n        marginTop: image.top,\n        transform: getTransform(image)\n      });\n\n      if (isChanged) {\n        this.output();\n      }\n    },\n\n    initCropBox: function () {\n      var options = this.options;\n      var canvas = this.canvas;\n      var aspectRatio = options.aspectRatio;\n      var autoCropArea = num(options.autoCropArea) || 0.8;\n      var cropBox = {\n            width: canvas.width,\n            height: canvas.height\n          };\n\n      if (aspectRatio) {\n        if (canvas.height * aspectRatio > canvas.width) {\n          cropBox.height = cropBox.width / aspectRatio;\n        } else {\n          cropBox.width = cropBox.height * aspectRatio;\n        }\n      }\n\n      this.cropBox = cropBox;\n      this.limitCropBox(true, true);\n\n      // Initialize auto crop area\n      cropBox.width = min(max(cropBox.width, cropBox.minWidth), cropBox.maxWidth);\n      cropBox.height = min(max(cropBox.height, cropBox.minHeight), cropBox.maxHeight);\n\n      // The width of auto crop area must large than \"minWidth\", and the height too. (#164)\n      cropBox.width = max(cropBox.minWidth, cropBox.width * autoCropArea);\n      cropBox.height = max(cropBox.minHeight, cropBox.height * autoCropArea);\n      cropBox.oldLeft = cropBox.left = canvas.left + (canvas.width - cropBox.width) / 2;\n      cropBox.oldTop = cropBox.top = canvas.top + (canvas.height - cropBox.height) / 2;\n\n      this.initialCropBox = $.extend({}, cropBox);\n    },\n\n    limitCropBox: function (isSizeLimited, isPositionLimited) {\n      var options = this.options;\n      var aspectRatio = options.aspectRatio;\n      var container = this.container;\n      var containerWidth = container.width;\n      var containerHeight = container.height;\n      var canvas = this.canvas;\n      var cropBox = this.cropBox;\n      var isLimited = this.isLimited;\n      var minCropBoxWidth;\n      var minCropBoxHeight;\n      var maxCropBoxWidth;\n      var maxCropBoxHeight;\n\n      if (isSizeLimited) {\n        minCropBoxWidth = num(options.minCropBoxWidth) || 0;\n        minCropBoxHeight = num(options.minCropBoxHeight) || 0;\n\n        // The min/maxCropBoxWidth/Height must be less than containerWidth/Height\n        minCropBoxWidth = min(minCropBoxWidth, containerWidth);\n        minCropBoxHeight = min(minCropBoxHeight, containerHeight);\n        maxCropBoxWidth = min(containerWidth, isLimited ? canvas.width : containerWidth);\n        maxCropBoxHeight = min(containerHeight, isLimited ? canvas.height : containerHeight);\n\n        if (aspectRatio) {\n          if (minCropBoxWidth && minCropBoxHeight) {\n            if (minCropBoxHeight * aspectRatio > minCropBoxWidth) {\n              minCropBoxHeight = minCropBoxWidth / aspectRatio;\n            } else {\n              minCropBoxWidth = minCropBoxHeight * aspectRatio;\n            }\n          } else if (minCropBoxWidth) {\n            minCropBoxHeight = minCropBoxWidth / aspectRatio;\n          } else if (minCropBoxHeight) {\n            minCropBoxWidth = minCropBoxHeight * aspectRatio;\n          }\n\n          if (maxCropBoxHeight * aspectRatio > maxCropBoxWidth) {\n            maxCropBoxHeight = maxCropBoxWidth / aspectRatio;\n          } else {\n            maxCropBoxWidth = maxCropBoxHeight * aspectRatio;\n          }\n        }\n\n        // The minWidth/Height must be less than maxWidth/Height\n        cropBox.minWidth = min(minCropBoxWidth, maxCropBoxWidth);\n        cropBox.minHeight = min(minCropBoxHeight, maxCropBoxHeight);\n        cropBox.maxWidth = maxCropBoxWidth;\n        cropBox.maxHeight = maxCropBoxHeight;\n      }\n\n      if (isPositionLimited) {\n        if (isLimited) {\n          cropBox.minLeft = max(0, canvas.left);\n          cropBox.minTop = max(0, canvas.top);\n          cropBox.maxLeft = min(containerWidth, canvas.left + canvas.width) - cropBox.width;\n          cropBox.maxTop = min(containerHeight, canvas.top + canvas.height) - cropBox.height;\n        } else {\n          cropBox.minLeft = 0;\n          cropBox.minTop = 0;\n          cropBox.maxLeft = containerWidth - cropBox.width;\n          cropBox.maxTop = containerHeight - cropBox.height;\n        }\n      }\n    },\n\n    renderCropBox: function () {\n      var options = this.options;\n      var container = this.container;\n      var containerWidth = container.width;\n      var containerHeight = container.height;\n      var cropBox = this.cropBox;\n\n      if (cropBox.width > cropBox.maxWidth || cropBox.width < cropBox.minWidth) {\n        cropBox.left = cropBox.oldLeft;\n      }\n\n      if (cropBox.height > cropBox.maxHeight || cropBox.height < cropBox.minHeight) {\n        cropBox.top = cropBox.oldTop;\n      }\n\n      cropBox.width = min(max(cropBox.width, cropBox.minWidth), cropBox.maxWidth);\n      cropBox.height = min(max(cropBox.height, cropBox.minHeight), cropBox.maxHeight);\n\n      this.limitCropBox(false, true);\n\n      cropBox.oldLeft = cropBox.left = min(max(cropBox.left, cropBox.minLeft), cropBox.maxLeft);\n      cropBox.oldTop = cropBox.top = min(max(cropBox.top, cropBox.minTop), cropBox.maxTop);\n\n      if (options.movable && options.cropBoxMovable) {\n\n        // Turn to move the canvas when the crop box is equal to the container\n        this.$face.data(DATA_ACTION, (cropBox.width === containerWidth && cropBox.height === containerHeight) ? ACTION_MOVE : ACTION_ALL);\n      }\n\n      this.$cropBox.css({\n        width: cropBox.width,\n        height: cropBox.height,\n        left: cropBox.left,\n        top: cropBox.top\n      });\n\n      if (this.isCropped && this.isLimited) {\n        this.limitCanvas(true, true);\n      }\n\n      if (!this.isDisabled) {\n        this.output();\n      }\n    },\n\n    output: function () {\n      this.preview();\n\n      if (this.isCompleted) {\n        this.trigger(EVENT_CROP, this.getData());\n      } else if (!this.isBuilt) {\n\n        // Only trigger one crop event before complete\n        this.$element.one(EVENT_BUILT, $.proxy(function () {\n          this.trigger(EVENT_CROP, this.getData());\n        }, this));\n      }\n    },\n\n    initPreview: function () {\n      var crossOrigin = getCrossOrigin(this.crossOrigin);\n      var url = crossOrigin ? this.crossOriginUrl : this.url;\n      var $clone2;\n\n      this.$preview = $(this.options.preview);\n      this.$clone2 = $clone2 = $('<img' + crossOrigin + ' src=\"' + url + '\">');\n      this.$viewBox.html($clone2);\n      this.$preview.each(function () {\n        var $this = $(this);\n\n        // Save the original size for recover\n        $this.data(DATA_PREVIEW, {\n          width: $this.width(),\n          height: $this.height(),\n          html: $this.html()\n        });\n\n        /**\n         * Override img element styles\n         * Add `display:block` to avoid margin top issue\n         * (Occur only when margin-top <= -height)\n         */\n        $this.html(\n          '<img' + crossOrigin + ' src=\"' + url + '\" style=\"' +\n          'display:block;width:100%;height:auto;' +\n          'min-width:0!important;min-height:0!important;' +\n          'max-width:none!important;max-height:none!important;' +\n          'image-orientation:0deg!important;\">'\n        );\n      });\n    },\n\n    resetPreview: function () {\n      this.$preview.each(function () {\n        var $this = $(this);\n        var data = $this.data(DATA_PREVIEW);\n\n        $this.css({\n          width: data.width,\n          height: data.height\n        }).html(data.html).removeData(DATA_PREVIEW);\n      });\n    },\n\n    preview: function () {\n      var image = this.image;\n      var canvas = this.canvas;\n      var cropBox = this.cropBox;\n      var cropBoxWidth = cropBox.width;\n      var cropBoxHeight = cropBox.height;\n      var width = image.width;\n      var height = image.height;\n      var left = cropBox.left - canvas.left - image.left;\n      var top = cropBox.top - canvas.top - image.top;\n\n      if (!this.isCropped || this.isDisabled) {\n        return;\n      }\n\n      this.$clone2.css({\n        width: width,\n        height: height,\n        marginLeft: -left,\n        marginTop: -top,\n        transform: getTransform(image)\n      });\n\n      this.$preview.each(function () {\n        var $this = $(this);\n        var data = $this.data(DATA_PREVIEW);\n        var originalWidth = data.width;\n        var originalHeight = data.height;\n        var newWidth = originalWidth;\n        var newHeight = originalHeight;\n        var ratio = 1;\n\n        if (cropBoxWidth) {\n          ratio = originalWidth / cropBoxWidth;\n          newHeight = cropBoxHeight * ratio;\n        }\n\n        if (cropBoxHeight && newHeight > originalHeight) {\n          ratio = originalHeight / cropBoxHeight;\n          newWidth = cropBoxWidth * ratio;\n          newHeight = originalHeight;\n        }\n\n        $this.css({\n          width: newWidth,\n          height: newHeight\n        }).find('img').css({\n          width: width * ratio,\n          height: height * ratio,\n          marginLeft: -left * ratio,\n          marginTop: -top * ratio,\n          transform: getTransform(image)\n        });\n      });\n    },\n\n    bind: function () {\n      var options = this.options;\n      var $this = this.$element;\n      var $cropper = this.$cropper;\n\n      if ($.isFunction(options.cropstart)) {\n        $this.on(EVENT_CROP_START, options.cropstart);\n      }\n\n      if ($.isFunction(options.cropmove)) {\n        $this.on(EVENT_CROP_MOVE, options.cropmove);\n      }\n\n      if ($.isFunction(options.cropend)) {\n        $this.on(EVENT_CROP_END, options.cropend);\n      }\n\n      if ($.isFunction(options.crop)) {\n        $this.on(EVENT_CROP, options.crop);\n      }\n\n      if ($.isFunction(options.zoom)) {\n        $this.on(EVENT_ZOOM, options.zoom);\n      }\n\n      $cropper.on(EVENT_MOUSE_DOWN, $.proxy(this.cropStart, this));\n\n      if (options.zoomable && options.zoomOnWheel) {\n        $cropper.on(EVENT_WHEEL, $.proxy(this.wheel, this));\n      }\n\n      if (options.toggleDragModeOnDblclick) {\n        $cropper.on(EVENT_DBLCLICK, $.proxy(this.dblclick, this));\n      }\n\n      $document.\n        on(EVENT_MOUSE_MOVE, (this._cropMove = proxy(this.cropMove, this))).\n        on(EVENT_MOUSE_UP, (this._cropEnd = proxy(this.cropEnd, this)));\n\n      if (options.responsive) {\n        $window.on(EVENT_RESIZE, (this._resize = proxy(this.resize, this)));\n      }\n    },\n\n    unbind: function () {\n      var options = this.options;\n      var $this = this.$element;\n      var $cropper = this.$cropper;\n\n      if ($.isFunction(options.cropstart)) {\n        $this.off(EVENT_CROP_START, options.cropstart);\n      }\n\n      if ($.isFunction(options.cropmove)) {\n        $this.off(EVENT_CROP_MOVE, options.cropmove);\n      }\n\n      if ($.isFunction(options.cropend)) {\n        $this.off(EVENT_CROP_END, options.cropend);\n      }\n\n      if ($.isFunction(options.crop)) {\n        $this.off(EVENT_CROP, options.crop);\n      }\n\n      if ($.isFunction(options.zoom)) {\n        $this.off(EVENT_ZOOM, options.zoom);\n      }\n\n      $cropper.off(EVENT_MOUSE_DOWN, this.cropStart);\n\n      if (options.zoomable && options.zoomOnWheel) {\n        $cropper.off(EVENT_WHEEL, this.wheel);\n      }\n\n      if (options.toggleDragModeOnDblclick) {\n        $cropper.off(EVENT_DBLCLICK, this.dblclick);\n      }\n\n      $document.\n        off(EVENT_MOUSE_MOVE, this._cropMove).\n        off(EVENT_MOUSE_UP, this._cropEnd);\n\n      if (options.responsive) {\n        $window.off(EVENT_RESIZE, this._resize);\n      }\n    },\n\n    resize: function () {\n      var restore = this.options.restore;\n      var $container = this.$container;\n      var container = this.container;\n      var canvasData;\n      var cropBoxData;\n      var ratio;\n\n      // Check `container` is necessary for IE8\n      if (this.isDisabled || !container) {\n        return;\n      }\n\n      ratio = $container.width() / container.width;\n\n      // Resize when width changed or height changed\n      if (ratio !== 1 || $container.height() !== container.height) {\n        if (restore) {\n          canvasData = this.getCanvasData();\n          cropBoxData = this.getCropBoxData();\n        }\n\n        this.render();\n\n        if (restore) {\n          this.setCanvasData($.each(canvasData, function (i, n) {\n            canvasData[i] = n * ratio;\n          }));\n          this.setCropBoxData($.each(cropBoxData, function (i, n) {\n            cropBoxData[i] = n * ratio;\n          }));\n        }\n      }\n    },\n\n    dblclick: function () {\n      if (this.isDisabled) {\n        return;\n      }\n\n      if (this.$dragBox.hasClass(CLASS_CROP)) {\n        this.setDragMode(ACTION_MOVE);\n      } else {\n        this.setDragMode(ACTION_CROP);\n      }\n    },\n\n    wheel: function (event) {\n      var e = event.originalEvent || event;\n      var ratio = num(this.options.wheelZoomRatio) || 0.1;\n      var delta = 1;\n\n      if (this.isDisabled) {\n        return;\n      }\n\n      event.preventDefault();\n\n      // Limit wheel speed to prevent zoom too fast\n      if (this.wheeling) {\n        return;\n      }\n\n      this.wheeling = true;\n\n      setTimeout($.proxy(function () {\n        this.wheeling = false;\n      }, this), 50);\n\n      if (e.deltaY) {\n        delta = e.deltaY > 0 ? 1 : -1;\n      } else if (e.wheelDelta) {\n        delta = -e.wheelDelta / 120;\n      } else if (e.detail) {\n        delta = e.detail > 0 ? 1 : -1;\n      }\n\n      this.zoom(-delta * ratio, event);\n    },\n\n    cropStart: function (event) {\n      var options = this.options;\n      var originalEvent = event.originalEvent;\n      var touches = originalEvent && originalEvent.touches;\n      var e = event;\n      var touchesLength;\n      var action;\n\n      if (this.isDisabled) {\n        return;\n      }\n\n      if (touches) {\n        touchesLength = touches.length;\n\n        if (touchesLength > 1) {\n          if (options.zoomable && options.zoomOnTouch && touchesLength === 2) {\n            e = touches[1];\n            this.startX2 = e.pageX;\n            this.startY2 = e.pageY;\n            action = ACTION_ZOOM;\n          } else {\n            return;\n          }\n        }\n\n        e = touches[0];\n      }\n\n      action = action || $(e.target).data(DATA_ACTION);\n\n      if (REGEXP_ACTIONS.test(action)) {\n        if (this.trigger(EVENT_CROP_START, {\n          originalEvent: originalEvent,\n          action: action\n        }).isDefaultPrevented()) {\n          return;\n        }\n\n        event.preventDefault();\n\n        this.action = action;\n        this.cropping = false;\n\n        // IE8  has `event.pageX/Y`, but not `event.originalEvent.pageX/Y`\n        // IE10 has `event.originalEvent.pageX/Y`, but not `event.pageX/Y`\n        this.startX = e.pageX || originalEvent && originalEvent.pageX;\n        this.startY = e.pageY || originalEvent && originalEvent.pageY;\n\n        if (action === ACTION_CROP) {\n          this.cropping = true;\n          this.$dragBox.addClass(CLASS_MODAL);\n        }\n      }\n    },\n\n    cropMove: function (event) {\n      var options = this.options;\n      var originalEvent = event.originalEvent;\n      var touches = originalEvent && originalEvent.touches;\n      var e = event;\n      var action = this.action;\n      var touchesLength;\n\n      if (this.isDisabled) {\n        return;\n      }\n\n      if (touches) {\n        touchesLength = touches.length;\n\n        if (touchesLength > 1) {\n          if (options.zoomable && options.zoomOnTouch && touchesLength === 2) {\n            e = touches[1];\n            this.endX2 = e.pageX;\n            this.endY2 = e.pageY;\n          } else {\n            return;\n          }\n        }\n\n        e = touches[0];\n      }\n\n      if (action) {\n        if (this.trigger(EVENT_CROP_MOVE, {\n          originalEvent: originalEvent,\n          action: action\n        }).isDefaultPrevented()) {\n          return;\n        }\n\n        event.preventDefault();\n\n        this.endX = e.pageX || originalEvent && originalEvent.pageX;\n        this.endY = e.pageY || originalEvent && originalEvent.pageY;\n\n        this.change(e.shiftKey, action === ACTION_ZOOM ? event : null);\n      }\n    },\n\n    cropEnd: function (event) {\n      var originalEvent = event.originalEvent;\n      var action = this.action;\n\n      if (this.isDisabled) {\n        return;\n      }\n\n      if (action) {\n        event.preventDefault();\n\n        if (this.cropping) {\n          this.cropping = false;\n          this.$dragBox.toggleClass(CLASS_MODAL, this.isCropped && this.options.modal);\n        }\n\n        this.action = '';\n\n        this.trigger(EVENT_CROP_END, {\n          originalEvent: originalEvent,\n          action: action\n        });\n      }\n    },\n\n    change: function (shiftKey, event) {\n      var options = this.options;\n      var aspectRatio = options.aspectRatio;\n      var action = this.action;\n      var container = this.container;\n      var canvas = this.canvas;\n      var cropBox = this.cropBox;\n      var width = cropBox.width;\n      var height = cropBox.height;\n      var left = cropBox.left;\n      var top = cropBox.top;\n      var right = left + width;\n      var bottom = top + height;\n      var minLeft = 0;\n      var minTop = 0;\n      var maxWidth = container.width;\n      var maxHeight = container.height;\n      var renderable = true;\n      var offset;\n      var range;\n\n      // Locking aspect ratio in \"free mode\" by holding shift key (#259)\n      if (!aspectRatio && shiftKey) {\n        aspectRatio = width && height ? width / height : 1;\n      }\n\n      if (this.limited) {\n        minLeft = cropBox.minLeft;\n        minTop = cropBox.minTop;\n        maxWidth = minLeft + min(container.width, canvas.left + canvas.width);\n        maxHeight = minTop + min(container.height, canvas.top + canvas.height);\n      }\n\n      range = {\n        x: this.endX - this.startX,\n        y: this.endY - this.startY\n      };\n\n      if (aspectRatio) {\n        range.X = range.y * aspectRatio;\n        range.Y = range.x / aspectRatio;\n      }\n\n      switch (action) {\n        // Move crop box\n        case ACTION_ALL:\n          left += range.x;\n          top += range.y;\n          break;\n\n        // Resize crop box\n        case ACTION_EAST:\n          if (range.x >= 0 && (right >= maxWidth || aspectRatio &&\n            (top <= minTop || bottom >= maxHeight))) {\n\n            renderable = false;\n            break;\n          }\n\n          width += range.x;\n\n          if (aspectRatio) {\n            height = width / aspectRatio;\n            top -= range.Y / 2;\n          }\n\n          if (width < 0) {\n            action = ACTION_WEST;\n            width = 0;\n          }\n\n          break;\n\n        case ACTION_NORTH:\n          if (range.y <= 0 && (top <= minTop || aspectRatio &&\n            (left <= minLeft || right >= maxWidth))) {\n\n            renderable = false;\n            break;\n          }\n\n          height -= range.y;\n          top += range.y;\n\n          if (aspectRatio) {\n            width = height * aspectRatio;\n            left += range.X / 2;\n          }\n\n          if (height < 0) {\n            action = ACTION_SOUTH;\n            height = 0;\n          }\n\n          break;\n\n        case ACTION_WEST:\n          if (range.x <= 0 && (left <= minLeft || aspectRatio &&\n            (top <= minTop || bottom >= maxHeight))) {\n\n            renderable = false;\n            break;\n          }\n\n          width -= range.x;\n          left += range.x;\n\n          if (aspectRatio) {\n            height = width / aspectRatio;\n            top += range.Y / 2;\n          }\n\n          if (width < 0) {\n            action = ACTION_EAST;\n            width = 0;\n          }\n\n          break;\n\n        case ACTION_SOUTH:\n          if (range.y >= 0 && (bottom >= maxHeight || aspectRatio &&\n            (left <= minLeft || right >= maxWidth))) {\n\n            renderable = false;\n            break;\n          }\n\n          height += range.y;\n\n          if (aspectRatio) {\n            width = height * aspectRatio;\n            left -= range.X / 2;\n          }\n\n          if (height < 0) {\n            action = ACTION_NORTH;\n            height = 0;\n          }\n\n          break;\n\n        case ACTION_NORTH_EAST:\n          if (aspectRatio) {\n            if (range.y <= 0 && (top <= minTop || right >= maxWidth)) {\n              renderable = false;\n              break;\n            }\n\n            height -= range.y;\n            top += range.y;\n            width = height * aspectRatio;\n          } else {\n            if (range.x >= 0) {\n              if (right < maxWidth) {\n                width += range.x;\n              } else if (range.y <= 0 && top <= minTop) {\n                renderable = false;\n              }\n            } else {\n              width += range.x;\n            }\n\n            if (range.y <= 0) {\n              if (top > minTop) {\n                height -= range.y;\n                top += range.y;\n              }\n            } else {\n              height -= range.y;\n              top += range.y;\n            }\n          }\n\n          if (width < 0 && height < 0) {\n            action = ACTION_SOUTH_WEST;\n            height = 0;\n            width = 0;\n          } else if (width < 0) {\n            action = ACTION_NORTH_WEST;\n            width = 0;\n          } else if (height < 0) {\n            action = ACTION_SOUTH_EAST;\n            height = 0;\n          }\n\n          break;\n\n        case ACTION_NORTH_WEST:\n          if (aspectRatio) {\n            if (range.y <= 0 && (top <= minTop || left <= minLeft)) {\n              renderable = false;\n              break;\n            }\n\n            height -= range.y;\n            top += range.y;\n            width = height * aspectRatio;\n            left += range.X;\n          } else {\n            if (range.x <= 0) {\n              if (left > minLeft) {\n                width -= range.x;\n                left += range.x;\n              } else if (range.y <= 0 && top <= minTop) {\n                renderable = false;\n              }\n            } else {\n              width -= range.x;\n              left += range.x;\n            }\n\n            if (range.y <= 0) {\n              if (top > minTop) {\n                height -= range.y;\n                top += range.y;\n              }\n            } else {\n              height -= range.y;\n              top += range.y;\n            }\n          }\n\n          if (width < 0 && height < 0) {\n            action = ACTION_SOUTH_EAST;\n            height = 0;\n            width = 0;\n          } else if (width < 0) {\n            action = ACTION_NORTH_EAST;\n            width = 0;\n          } else if (height < 0) {\n            action = ACTION_SOUTH_WEST;\n            height = 0;\n          }\n\n          break;\n\n        case ACTION_SOUTH_WEST:\n          if (aspectRatio) {\n            if (range.x <= 0 && (left <= minLeft || bottom >= maxHeight)) {\n              renderable = false;\n              break;\n            }\n\n            width -= range.x;\n            left += range.x;\n            height = width / aspectRatio;\n          } else {\n            if (range.x <= 0) {\n              if (left > minLeft) {\n                width -= range.x;\n                left += range.x;\n              } else if (range.y >= 0 && bottom >= maxHeight) {\n                renderable = false;\n              }\n            } else {\n              width -= range.x;\n              left += range.x;\n            }\n\n            if (range.y >= 0) {\n              if (bottom < maxHeight) {\n                height += range.y;\n              }\n            } else {\n              height += range.y;\n            }\n          }\n\n          if (width < 0 && height < 0) {\n            action = ACTION_NORTH_EAST;\n            height = 0;\n            width = 0;\n          } else if (width < 0) {\n            action = ACTION_SOUTH_EAST;\n            width = 0;\n          } else if (height < 0) {\n            action = ACTION_NORTH_WEST;\n            height = 0;\n          }\n\n          break;\n\n        case ACTION_SOUTH_EAST:\n          if (aspectRatio) {\n            if (range.x >= 0 && (right >= maxWidth || bottom >= maxHeight)) {\n              renderable = false;\n              break;\n            }\n\n            width += range.x;\n            height = width / aspectRatio;\n          } else {\n            if (range.x >= 0) {\n              if (right < maxWidth) {\n                width += range.x;\n              } else if (range.y >= 0 && bottom >= maxHeight) {\n                renderable = false;\n              }\n            } else {\n              width += range.x;\n            }\n\n            if (range.y >= 0) {\n              if (bottom < maxHeight) {\n                height += range.y;\n              }\n            } else {\n              height += range.y;\n            }\n          }\n\n          if (width < 0 && height < 0) {\n            action = ACTION_NORTH_WEST;\n            height = 0;\n            width = 0;\n          } else if (width < 0) {\n            action = ACTION_SOUTH_WEST;\n            width = 0;\n          } else if (height < 0) {\n            action = ACTION_NORTH_EAST;\n            height = 0;\n          }\n\n          break;\n\n        // Move canvas\n        case ACTION_MOVE:\n          this.move(range.x, range.y);\n          renderable = false;\n          break;\n\n        // Zoom canvas\n        case ACTION_ZOOM:\n          this.zoom((function (x1, y1, x2, y2) {\n            var z1 = sqrt(x1 * x1 + y1 * y1);\n            var z2 = sqrt(x2 * x2 + y2 * y2);\n\n            return (z2 - z1) / z1;\n          })(\n            abs(this.startX - this.startX2),\n            abs(this.startY - this.startY2),\n            abs(this.endX - this.endX2),\n            abs(this.endY - this.endY2)\n          ), event);\n          this.startX2 = this.endX2;\n          this.startY2 = this.endY2;\n          renderable = false;\n          break;\n\n        // Create crop box\n        case ACTION_CROP:\n          if (!range.x || !range.y) {\n            renderable = false;\n            break;\n          }\n\n          offset = this.$cropper.offset();\n          left = this.startX - offset.left;\n          top = this.startY - offset.top;\n          width = cropBox.minWidth;\n          height = cropBox.minHeight;\n\n          if (range.x > 0) {\n            action = range.y > 0 ? ACTION_SOUTH_EAST : ACTION_NORTH_EAST;\n          } else if (range.x < 0) {\n            left -= width;\n            action = range.y > 0 ? ACTION_SOUTH_WEST : ACTION_NORTH_WEST;\n          }\n\n          if (range.y < 0) {\n            top -= height;\n          }\n\n          // Show the crop box if is hidden\n          if (!this.isCropped) {\n            this.$cropBox.removeClass(CLASS_HIDDEN);\n            this.isCropped = true;\n\n            if (this.limited) {\n              this.limitCropBox(true, true);\n            }\n          }\n\n          break;\n\n        // No default\n      }\n\n      if (renderable) {\n        cropBox.width = width;\n        cropBox.height = height;\n        cropBox.left = left;\n        cropBox.top = top;\n        this.action = action;\n\n        this.renderCropBox();\n      }\n\n      // Override\n      this.startX = this.endX;\n      this.startY = this.endY;\n    },\n\n    // Show the crop box manually\n    crop: function () {\n      if (!this.isBuilt || this.isDisabled) {\n        return;\n      }\n\n      if (!this.isCropped) {\n        this.isCropped = true;\n        this.limitCropBox(true, true);\n\n        if (this.options.modal) {\n          this.$dragBox.addClass(CLASS_MODAL);\n        }\n\n        this.$cropBox.removeClass(CLASS_HIDDEN);\n      }\n\n      this.setCropBoxData(this.initialCropBox);\n    },\n\n    // Reset the image and crop box to their initial states\n    reset: function () {\n      if (!this.isBuilt || this.isDisabled) {\n        return;\n      }\n\n      this.image = $.extend({}, this.initialImage);\n      this.canvas = $.extend({}, this.initialCanvas);\n      this.cropBox = $.extend({}, this.initialCropBox);\n\n      this.renderCanvas();\n\n      if (this.isCropped) {\n        this.renderCropBox();\n      }\n    },\n\n    // Clear the crop box\n    clear: function () {\n      if (!this.isCropped || this.isDisabled) {\n        return;\n      }\n\n      $.extend(this.cropBox, {\n        left: 0,\n        top: 0,\n        width: 0,\n        height: 0\n      });\n\n      this.isCropped = false;\n      this.renderCropBox();\n\n      this.limitCanvas(true, true);\n\n      // Render canvas after crop box rendered\n      this.renderCanvas();\n\n      this.$dragBox.removeClass(CLASS_MODAL);\n      this.$cropBox.addClass(CLASS_HIDDEN);\n    },\n\n    /**\n     * Replace the image's src and rebuild the cropper\n     *\n     * @param {String} url\n     * @param {Boolean} onlyColorChanged (optional)\n     */\n    replace: function (url, onlyColorChanged) {\n      if (!this.isDisabled && url) {\n        if (this.isImg) {\n          this.$element.attr('src', url);\n        }\n\n        if (onlyColorChanged) {\n          this.url = url;\n          this.$clone.attr('src', url);\n\n          if (this.isBuilt) {\n            this.$preview.find('img').add(this.$clone2).attr('src', url);\n          }\n        } else {\n          if (this.isImg) {\n            this.isReplaced = true;\n          }\n\n          // Clear previous data\n          this.options.data = null;\n          this.load(url);\n        }\n      }\n    },\n\n    // Enable (unfreeze) the cropper\n    enable: function () {\n      if (this.isBuilt) {\n        this.isDisabled = false;\n        this.$cropper.removeClass(CLASS_DISABLED);\n      }\n    },\n\n    // Disable (freeze) the cropper\n    disable: function () {\n      if (this.isBuilt) {\n        this.isDisabled = true;\n        this.$cropper.addClass(CLASS_DISABLED);\n      }\n    },\n\n    // Destroy the cropper and remove the instance from the image\n    destroy: function () {\n      var $this = this.$element;\n\n      if (this.isLoaded) {\n        if (this.isImg && this.isReplaced) {\n          $this.attr('src', this.originalUrl);\n        }\n\n        this.unbuild();\n        $this.removeClass(CLASS_HIDDEN);\n      } else {\n        if (this.isImg) {\n          $this.off(EVENT_LOAD, this.start);\n        } else if (this.$clone) {\n          this.$clone.remove();\n        }\n      }\n\n      $this.removeData(NAMESPACE);\n    },\n\n    /**\n     * Move the canvas with relative offsets\n     *\n     * @param {Number} offsetX\n     * @param {Number} offsetY (optional)\n     */\n    move: function (offsetX, offsetY) {\n      var canvas = this.canvas;\n\n      this.moveTo(\n        isUndefined(offsetX) ? offsetX : canvas.left + num(offsetX),\n        isUndefined(offsetY) ? offsetY : canvas.top + num(offsetY)\n      );\n    },\n\n    /**\n     * Move the canvas to an absolute point\n     *\n     * @param {Number} x\n     * @param {Number} y (optional)\n     */\n    moveTo: function (x, y) {\n      var canvas = this.canvas;\n      var isChanged = false;\n\n      // If \"y\" is not present, its default value is \"x\"\n      if (isUndefined(y)) {\n        y = x;\n      }\n\n      x = num(x);\n      y = num(y);\n\n      if (this.isBuilt && !this.isDisabled && this.options.movable) {\n        if (isNumber(x)) {\n          canvas.left = x;\n          isChanged = true;\n        }\n\n        if (isNumber(y)) {\n          canvas.top = y;\n          isChanged = true;\n        }\n\n        if (isChanged) {\n          this.renderCanvas(true);\n        }\n      }\n    },\n\n    /**\n     * Zoom the canvas with a relative ratio\n     *\n     * @param {Number} ratio\n     * @param {jQuery Event} _event (private)\n     */\n    zoom: function (ratio, _event) {\n      var canvas = this.canvas;\n\n      ratio = num(ratio);\n\n      if (ratio < 0) {\n        ratio =  1 / (1 - ratio);\n      } else {\n        ratio = 1 + ratio;\n      }\n\n      this.zoomTo(canvas.width * ratio / canvas.naturalWidth, _event);\n    },\n\n    /**\n     * Zoom the canvas to an absolute ratio\n     *\n     * @param {Number} ratio\n     * @param {jQuery Event} _event (private)\n     */\n    zoomTo: function (ratio, _event) {\n      var options = this.options;\n      var canvas = this.canvas;\n      var width = canvas.width;\n      var height = canvas.height;\n      var naturalWidth = canvas.naturalWidth;\n      var naturalHeight = canvas.naturalHeight;\n      var originalEvent;\n      var newWidth;\n      var newHeight;\n      var offset;\n      var center;\n\n      ratio = num(ratio);\n\n      if (ratio >= 0 && this.isBuilt && !this.isDisabled && options.zoomable) {\n        newWidth = naturalWidth * ratio;\n        newHeight = naturalHeight * ratio;\n\n        if (_event) {\n          originalEvent = _event.originalEvent;\n        }\n\n        if (this.trigger(EVENT_ZOOM, {\n          originalEvent: originalEvent,\n          oldRatio: width / naturalWidth,\n          ratio: newWidth / naturalWidth\n        }).isDefaultPrevented()) {\n          return;\n        }\n\n        if (originalEvent) {\n          offset = this.$cropper.offset();\n          center = originalEvent.touches ? getTouchesCenter(originalEvent.touches) : {\n            pageX: _event.pageX || originalEvent.pageX || 0,\n            pageY: _event.pageY || originalEvent.pageY || 0\n          };\n\n          // Zoom from the triggering point of the event\n          canvas.left -= (newWidth - width) * (\n            ((center.pageX - offset.left) - canvas.left) / width\n          );\n          canvas.top -= (newHeight - height) * (\n            ((center.pageY - offset.top) - canvas.top) / height\n          );\n        } else {\n\n          // Zoom from the center of the canvas\n          canvas.left -= (newWidth - width) / 2;\n          canvas.top -= (newHeight - height) / 2;\n        }\n\n        canvas.width = newWidth;\n        canvas.height = newHeight;\n        this.renderCanvas(true);\n      }\n    },\n\n    /**\n     * Rotate the canvas with a relative degree\n     *\n     * @param {Number} degree\n     */\n    rotate: function (degree) {\n      this.rotateTo((this.image.rotate || 0) + num(degree));\n    },\n\n    /**\n     * Rotate the canvas to an absolute degree\n     * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#rotate()\n     *\n     * @param {Number} degree\n     */\n    rotateTo: function (degree) {\n      degree = num(degree);\n\n      if (isNumber(degree) && this.isBuilt && !this.isDisabled && this.options.rotatable) {\n        this.image.rotate = degree % 360;\n        this.isRotated = true;\n        this.renderCanvas(true);\n      }\n    },\n\n    /**\n     * Scale the image\n     * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#scale()\n     *\n     * @param {Number} scaleX\n     * @param {Number} scaleY (optional)\n     */\n    scale: function (scaleX, scaleY) {\n      var image = this.image;\n      var isChanged = false;\n\n      // If \"scaleY\" is not present, its default value is \"scaleX\"\n      if (isUndefined(scaleY)) {\n        scaleY = scaleX;\n      }\n\n      scaleX = num(scaleX);\n      scaleY = num(scaleY);\n\n      if (this.isBuilt && !this.isDisabled && this.options.scalable) {\n        if (isNumber(scaleX)) {\n          image.scaleX = scaleX;\n          isChanged = true;\n        }\n\n        if (isNumber(scaleY)) {\n          image.scaleY = scaleY;\n          isChanged = true;\n        }\n\n        if (isChanged) {\n          this.renderImage(true);\n        }\n      }\n    },\n\n    /**\n     * Scale the abscissa of the image\n     *\n     * @param {Number} scaleX\n     */\n    scaleX: function (scaleX) {\n      var scaleY = this.image.scaleY;\n\n      this.scale(scaleX, isNumber(scaleY) ? scaleY : 1);\n    },\n\n    /**\n     * Scale the ordinate of the image\n     *\n     * @param {Number} scaleY\n     */\n    scaleY: function (scaleY) {\n      var scaleX = this.image.scaleX;\n\n      this.scale(isNumber(scaleX) ? scaleX : 1, scaleY);\n    },\n\n    /**\n     * Get the cropped area position and size data (base on the original image)\n     *\n     * @param {Boolean} isRounded (optional)\n     * @return {Object} data\n     */\n    getData: function (isRounded) {\n      var options = this.options;\n      var image = this.image;\n      var canvas = this.canvas;\n      var cropBox = this.cropBox;\n      var ratio;\n      var data;\n\n      if (this.isBuilt && this.isCropped) {\n        data = {\n          x: cropBox.left - canvas.left,\n          y: cropBox.top - canvas.top,\n          width: cropBox.width,\n          height: cropBox.height\n        };\n\n        ratio = image.width / image.naturalWidth;\n\n        $.each(data, function (i, n) {\n          n = n / ratio;\n          data[i] = isRounded ? round(n) : n;\n        });\n\n      } else {\n        data = {\n          x: 0,\n          y: 0,\n          width: 0,\n          height: 0\n        };\n      }\n\n      if (options.rotatable) {\n        data.rotate = image.rotate || 0;\n      }\n\n      if (options.scalable) {\n        data.scaleX = image.scaleX || 1;\n        data.scaleY = image.scaleY || 1;\n      }\n\n      return data;\n    },\n\n    /**\n     * Set the cropped area position and size with new data\n     *\n     * @param {Object} data\n     */\n    setData: function (data) {\n      var options = this.options;\n      var image = this.image;\n      var canvas = this.canvas;\n      var cropBoxData = {};\n      var isRotated;\n      var isScaled;\n      var ratio;\n\n      if ($.isFunction(data)) {\n        data = data.call(this.element);\n      }\n\n      if (this.isBuilt && !this.isDisabled && $.isPlainObject(data)) {\n        if (options.rotatable) {\n          if (isNumber(data.rotate) && data.rotate !== image.rotate) {\n            image.rotate = data.rotate;\n            this.isRotated = isRotated = true;\n          }\n        }\n\n        if (options.scalable) {\n          if (isNumber(data.scaleX) && data.scaleX !== image.scaleX) {\n            image.scaleX = data.scaleX;\n            isScaled = true;\n          }\n\n          if (isNumber(data.scaleY) && data.scaleY !== image.scaleY) {\n            image.scaleY = data.scaleY;\n            isScaled = true;\n          }\n        }\n\n        if (isRotated) {\n          this.renderCanvas();\n        } else if (isScaled) {\n          this.renderImage();\n        }\n\n        ratio = image.width / image.naturalWidth;\n\n        if (isNumber(data.x)) {\n          cropBoxData.left = data.x * ratio + canvas.left;\n        }\n\n        if (isNumber(data.y)) {\n          cropBoxData.top = data.y * ratio + canvas.top;\n        }\n\n        if (isNumber(data.width)) {\n          cropBoxData.width = data.width * ratio;\n        }\n\n        if (isNumber(data.height)) {\n          cropBoxData.height = data.height * ratio;\n        }\n\n        this.setCropBoxData(cropBoxData);\n      }\n    },\n\n    /**\n     * Get the container size data\n     *\n     * @return {Object} data\n     */\n    getContainerData: function () {\n      return this.isBuilt ? this.container : {};\n    },\n\n    /**\n     * Get the image position and size data\n     *\n     * @return {Object} data\n     */\n    getImageData: function () {\n      return this.isLoaded ? this.image : {};\n    },\n\n    /**\n     * Get the canvas position and size data\n     *\n     * @return {Object} data\n     */\n    getCanvasData: function () {\n      var canvas = this.canvas;\n      var data = {};\n\n      if (this.isBuilt) {\n        $.each([\n          'left',\n          'top',\n          'width',\n          'height',\n          'naturalWidth',\n          'naturalHeight'\n        ], function (i, n) {\n          data[n] = canvas[n];\n        });\n      }\n\n      return data;\n    },\n\n    /**\n     * Set the canvas position and size with new data\n     *\n     * @param {Object} data\n     */\n    setCanvasData: function (data) {\n      var canvas = this.canvas;\n      var aspectRatio = canvas.aspectRatio;\n\n      if ($.isFunction(data)) {\n        data = data.call(this.$element);\n      }\n\n      if (this.isBuilt && !this.isDisabled && $.isPlainObject(data)) {\n        if (isNumber(data.left)) {\n          canvas.left = data.left;\n        }\n\n        if (isNumber(data.top)) {\n          canvas.top = data.top;\n        }\n\n        if (isNumber(data.width)) {\n          canvas.width = data.width;\n          canvas.height = data.width / aspectRatio;\n        } else if (isNumber(data.height)) {\n          canvas.height = data.height;\n          canvas.width = data.height * aspectRatio;\n        }\n\n        this.renderCanvas(true);\n      }\n    },\n\n    /**\n     * Get the crop box position and size data\n     *\n     * @return {Object} data\n     */\n    getCropBoxData: function () {\n      var cropBox = this.cropBox;\n      var data;\n\n      if (this.isBuilt && this.isCropped) {\n        data = {\n          left: cropBox.left,\n          top: cropBox.top,\n          width: cropBox.width,\n          height: cropBox.height\n        };\n      }\n\n      return data || {};\n    },\n\n    /**\n     * Set the crop box position and size with new data\n     *\n     * @param {Object} data\n     */\n    setCropBoxData: function (data) {\n      var cropBox = this.cropBox;\n      var aspectRatio = this.options.aspectRatio;\n      var isWidthChanged;\n      var isHeightChanged;\n\n      if ($.isFunction(data)) {\n        data = data.call(this.$element);\n      }\n\n      if (this.isBuilt && this.isCropped && !this.isDisabled && $.isPlainObject(data)) {\n\n        if (isNumber(data.left)) {\n          cropBox.left = data.left;\n        }\n\n        if (isNumber(data.top)) {\n          cropBox.top = data.top;\n        }\n\n        if (isNumber(data.width)) {\n          isWidthChanged = true;\n          cropBox.width = data.width;\n        }\n\n        if (isNumber(data.height)) {\n          isHeightChanged = true;\n          cropBox.height = data.height;\n        }\n\n        if (aspectRatio) {\n          if (isWidthChanged) {\n            cropBox.height = cropBox.width / aspectRatio;\n          } else if (isHeightChanged) {\n            cropBox.width = cropBox.height * aspectRatio;\n          }\n        }\n\n        this.renderCropBox();\n      }\n    },\n\n    /**\n     * Get a canvas drawn the cropped image\n     *\n     * @param {Object} options (optional)\n     * @return {HTMLCanvasElement} canvas\n     */\n    getCroppedCanvas: function (options) {\n      var originalWidth;\n      var originalHeight;\n      var canvasWidth;\n      var canvasHeight;\n      var scaledWidth;\n      var scaledHeight;\n      var scaledRatio;\n      var aspectRatio;\n      var canvas;\n      var context;\n      var data;\n\n      if (!this.isBuilt || !this.isCropped || !SUPPORT_CANVAS) {\n        return;\n      }\n\n      if (!$.isPlainObject(options)) {\n        options = {};\n      }\n\n      data = this.getData();\n      originalWidth = data.width;\n      originalHeight = data.height;\n      aspectRatio = originalWidth / originalHeight;\n\n      if ($.isPlainObject(options)) {\n        scaledWidth = options.width;\n        scaledHeight = options.height;\n\n        if (scaledWidth) {\n          scaledHeight = scaledWidth / aspectRatio;\n          scaledRatio = scaledWidth / originalWidth;\n        } else if (scaledHeight) {\n          scaledWidth = scaledHeight * aspectRatio;\n          scaledRatio = scaledHeight / originalHeight;\n        }\n      }\n\n      // The canvas element will use `Math.floor` on a float number, so floor first\n      canvasWidth = floor(scaledWidth || originalWidth);\n      canvasHeight = floor(scaledHeight || originalHeight);\n\n      canvas = $('<canvas>')[0];\n      canvas.width = canvasWidth;\n      canvas.height = canvasHeight;\n      context = canvas.getContext('2d');\n\n      if (options.fillColor) {\n        context.fillStyle = options.fillColor;\n        context.fillRect(0, 0, canvasWidth, canvasHeight);\n      }\n\n      // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D.drawImage\n      context.drawImage.apply(context, (function () {\n        var source = getSourceCanvas(this.$clone[0], this.image);\n        var sourceWidth = source.width;\n        var sourceHeight = source.height;\n        var canvas = this.canvas;\n        var params = [source];\n\n        // Source canvas\n        var srcX = data.x + canvas.naturalWidth * (abs(data.scaleX || 1) - 1) / 2;\n        var srcY = data.y + canvas.naturalHeight * (abs(data.scaleY || 1) - 1) / 2;\n        var srcWidth;\n        var srcHeight;\n\n        // Destination canvas\n        var dstX;\n        var dstY;\n        var dstWidth;\n        var dstHeight;\n\n        if (srcX <= -originalWidth || srcX > sourceWidth) {\n          srcX = srcWidth = dstX = dstWidth = 0;\n        } else if (srcX <= 0) {\n          dstX = -srcX;\n          srcX = 0;\n          srcWidth = dstWidth = min(sourceWidth, originalWidth + srcX);\n        } else if (srcX <= sourceWidth) {\n          dstX = 0;\n          srcWidth = dstWidth = min(originalWidth, sourceWidth - srcX);\n        }\n\n        if (srcWidth <= 0 || srcY <= -originalHeight || srcY > sourceHeight) {\n          srcY = srcHeight = dstY = dstHeight = 0;\n        } else if (srcY <= 0) {\n          dstY = -srcY;\n          srcY = 0;\n          srcHeight = dstHeight = min(sourceHeight, originalHeight + srcY);\n        } else if (srcY <= sourceHeight) {\n          dstY = 0;\n          srcHeight = dstHeight = min(originalHeight, sourceHeight - srcY);\n        }\n\n        // All the numerical parameters should be integer for `drawImage` (#476)\n        params.push(floor(srcX), floor(srcY), floor(srcWidth), floor(srcHeight));\n\n        // Scale destination sizes\n        if (scaledRatio) {\n          dstX *= scaledRatio;\n          dstY *= scaledRatio;\n          dstWidth *= scaledRatio;\n          dstHeight *= scaledRatio;\n        }\n\n        // Avoid \"IndexSizeError\" in IE and Firefox\n        if (dstWidth > 0 && dstHeight > 0) {\n          params.push(floor(dstX), floor(dstY), floor(dstWidth), floor(dstHeight));\n        }\n\n        return params;\n      }).call(this));\n\n      return canvas;\n    },\n\n    /**\n     * Change the aspect ratio of the crop box\n     *\n     * @param {Number} aspectRatio\n     */\n    setAspectRatio: function (aspectRatio) {\n      var options = this.options;\n\n      if (!this.isDisabled && !isUndefined(aspectRatio)) {\n\n        // 0 -> NaN\n        options.aspectRatio = max(0, aspectRatio) || NaN;\n\n        if (this.isBuilt) {\n          this.initCropBox();\n\n          if (this.isCropped) {\n            this.renderCropBox();\n          }\n        }\n      }\n    },\n\n    /**\n     * Change the drag mode\n     *\n     * @param {String} mode (optional)\n     */\n    setDragMode: function (mode) {\n      var options = this.options;\n      var croppable;\n      var movable;\n\n      if (this.isLoaded && !this.isDisabled) {\n        croppable = mode === ACTION_CROP;\n        movable = options.movable && mode === ACTION_MOVE;\n        mode = (croppable || movable) ? mode : ACTION_NONE;\n\n        this.$dragBox.\n          data(DATA_ACTION, mode).\n          toggleClass(CLASS_CROP, croppable).\n          toggleClass(CLASS_MOVE, movable);\n\n        if (!options.cropBoxMovable) {\n\n          // Sync drag mode to crop box when it is not movable(#300)\n          this.$face.\n            data(DATA_ACTION, mode).\n            toggleClass(CLASS_CROP, croppable).\n            toggleClass(CLASS_MOVE, movable);\n        }\n      }\n    }\n  };\n\n  Cropper.DEFAULTS = {\n\n    // Define the view mode of the cropper\n    viewMode: 0, // 0, 1, 2, 3\n\n    // Define the dragging mode of the cropper\n    dragMode: 'crop', // 'crop', 'move' or 'none'\n\n    // Define the aspect ratio of the crop box\n    aspectRatio: NaN,\n\n    // An object with the previous cropping result data\n    data: null,\n\n    // A jQuery selector for adding extra containers to preview\n    preview: '',\n\n    // Re-render the cropper when resize the window\n    responsive: true,\n\n    // Restore the cropped area after resize the window\n    restore: true,\n\n    // Check if the current image is a cross-origin image\n    checkCrossOrigin: true,\n\n    // Check the current image's Exif Orientation information\n    checkOrientation: true,\n\n    // Show the black modal\n    modal: true,\n\n    // Show the dashed lines for guiding\n    guides: true,\n\n    // Show the center indicator for guiding\n    center: true,\n\n    // Show the white modal to highlight the crop box\n    highlight: true,\n\n    // Show the grid background\n    background: true,\n\n    // Enable to crop the image automatically when initialize\n    autoCrop: true,\n\n    // Define the percentage of automatic cropping area when initializes\n    autoCropArea: 0.8,\n\n    // Enable to move the image\n    movable: true,\n\n    // Enable to rotate the image\n    rotatable: true,\n\n    // Enable to scale the image\n    scalable: true,\n\n    // Enable to zoom the image\n    zoomable: true,\n\n    // Enable to zoom the image by dragging touch\n    zoomOnTouch: true,\n\n    // Enable to zoom the image by wheeling mouse\n    zoomOnWheel: true,\n\n    // Define zoom ratio when zoom the image by wheeling mouse\n    wheelZoomRatio: 0.1,\n\n    // Enable to move the crop box\n    cropBoxMovable: true,\n\n    // Enable to resize the crop box\n    cropBoxResizable: true,\n\n    // Toggle drag mode between \"crop\" and \"move\" when click twice on the cropper\n    toggleDragModeOnDblclick: true,\n\n    // Size limitation\n    minCanvasWidth: 0,\n    minCanvasHeight: 0,\n    minCropBoxWidth: 0,\n    minCropBoxHeight: 0,\n    minContainerWidth: 200,\n    minContainerHeight: 100,\n\n    // Shortcuts of events\n    build: null,\n    built: null,\n    cropstart: null,\n    cropmove: null,\n    cropend: null,\n    crop: null,\n    zoom: null\n  };\n\n  Cropper.setDefaults = function (options) {\n    $.extend(Cropper.DEFAULTS, options);\n  };\n\n  Cropper.TEMPLATE = (\n    '<div class=\"cropper-container\">' +\n      '<div class=\"cropper-wrap-box\">' +\n        '<div class=\"cropper-canvas\"></div>' +\n      '</div>' +\n      '<div class=\"cropper-drag-box\"></div>' +\n      '<div class=\"cropper-crop-box\">' +\n        '<span class=\"cropper-view-box\"></span>' +\n        '<span class=\"cropper-dashed dashed-h\"></span>' +\n        '<span class=\"cropper-dashed dashed-v\"></span>' +\n        '<span class=\"cropper-center\"></span>' +\n        '<span class=\"cropper-face\"></span>' +\n        '<span class=\"cropper-line line-e\" data-action=\"e\"></span>' +\n        '<span class=\"cropper-line line-n\" data-action=\"n\"></span>' +\n        '<span class=\"cropper-line line-w\" data-action=\"w\"></span>' +\n        '<span class=\"cropper-line line-s\" data-action=\"s\"></span>' +\n        '<span class=\"cropper-point point-e\" data-action=\"e\"></span>' +\n        '<span class=\"cropper-point point-n\" data-action=\"n\"></span>' +\n        '<span class=\"cropper-point point-w\" data-action=\"w\"></span>' +\n        '<span class=\"cropper-point point-s\" data-action=\"s\"></span>' +\n        '<span class=\"cropper-point point-ne\" data-action=\"ne\"></span>' +\n        '<span class=\"cropper-point point-nw\" data-action=\"nw\"></span>' +\n        '<span class=\"cropper-point point-sw\" data-action=\"sw\"></span>' +\n        '<span class=\"cropper-point point-se\" data-action=\"se\"></span>' +\n      '</div>' +\n    '</div>'\n  );\n\n  // Save the other cropper\n  Cropper.other = $.fn.cropper;\n\n  // Register as jQuery plugin\n  $.fn.cropper = function (option) {\n    var args = toArray(arguments, 1);\n    var result;\n\n    this.each(function () {\n      var $this = $(this);\n      var data = $this.data(NAMESPACE);\n      var options;\n      var fn;\n\n      if (!data) {\n        if (/destroy/.test(option)) {\n          return;\n        }\n\n        options = $.extend({}, $this.data(), $.isPlainObject(option) && option);\n        $this.data(NAMESPACE, (data = new Cropper(this, options)));\n      }\n\n      if (typeof option === 'string' && $.isFunction(fn = data[option])) {\n        result = fn.apply(data, args);\n      }\n    });\n\n    return isUndefined(result) ? this : result;\n  };\n\n  $.fn.cropper.Constructor = Cropper;\n  $.fn.cropper.setDefaults = Cropper.setDefaults;\n\n  // No conflict\n  $.fn.cropper.noConflict = function () {\n    $.fn.cropper = Cropper.other;\n    return this;\n  };\n\n});\n","/* eslint-disable no-useless-escape, no-var, no-underscore-dangle, func-names, no-unused-vars, no-return-assign, object-shorthand, one-var, consistent-return, class-methods-use-this */\n\nimport $ from 'jquery';\nimport 'cropper';\nimport _ from 'underscore';\n\n(global => {\n  // Matches everything but the file name\n  const FILENAMEREGEX = /^.*[\\\\\\/]/;\n\n  class GitLabCrop {\n    constructor(\n      input,\n      {\n        filename,\n        previewImage,\n        modalCrop,\n        pickImageEl,\n        uploadImageBtn,\n        modalCropImg,\n        exportWidth = 200,\n        exportHeight = 200,\n        cropBoxWidth = 200,\n        cropBoxHeight = 200,\n      } = {},\n    ) {\n      this.onUploadImageBtnClick = this.onUploadImageBtnClick.bind(this);\n      this.onModalHide = this.onModalHide.bind(this);\n      this.onModalShow = this.onModalShow.bind(this);\n      this.onPickImageClick = this.onPickImageClick.bind(this);\n      this.fileInput = $(input);\n      this.modalCropImg = _.isString(this.modalCropImg) ? $(this.modalCropImg) : this.modalCropImg;\n      this.fileInput\n        .attr('name', `${this.fileInput.attr('name')}-trigger`)\n        .attr('id', `${this.fileInput.attr('id')}-trigger`);\n      this.exportWidth = exportWidth;\n      this.exportHeight = exportHeight;\n      this.cropBoxWidth = cropBoxWidth;\n      this.cropBoxHeight = cropBoxHeight;\n      this.form = this.fileInput.parents('form');\n      this.filename = filename;\n      this.previewImage = previewImage;\n      this.modalCrop = modalCrop;\n      this.pickImageEl = pickImageEl;\n      this.uploadImageBtn = uploadImageBtn;\n      this.modalCropImg = modalCropImg;\n      this.filename = this.getElement(filename);\n      this.previewImage = this.getElement(previewImage);\n      this.pickImageEl = this.getElement(pickImageEl);\n      this.modalCrop = _.isString(modalCrop) ? $(modalCrop) : modalCrop;\n      this.uploadImageBtn = _.isString(uploadImageBtn) ? $(uploadImageBtn) : uploadImageBtn;\n      this.modalCropImg = _.isString(modalCropImg) ? $(modalCropImg) : modalCropImg;\n      this.cropActionsBtn = this.modalCrop.find('[data-method]');\n      this.bindEvents();\n    }\n\n    getElement(selector) {\n      return $(selector, this.form);\n    }\n\n    bindEvents() {\n      var _this;\n      _this = this;\n      this.fileInput.on('change', function(e) {\n        _this.onFileInputChange(e, this);\n        this.value = null;\n      });\n      this.pickImageEl.on('click', this.onPickImageClick);\n      this.modalCrop.on('shown.bs.modal', this.onModalShow);\n      this.modalCrop.on('hidden.bs.modal', this.onModalHide);\n      this.uploadImageBtn.on('click', this.onUploadImageBtnClick);\n      this.cropActionsBtn.on('click', function(e) {\n        var btn;\n        btn = this;\n        return _this.onActionBtnClick(btn);\n      });\n      return (this.croppedImageBlob = null);\n    }\n\n    onPickImageClick() {\n      return this.fileInput.trigger('click');\n    }\n\n    onModalShow() {\n      var _this;\n      _this = this;\n      return this.modalCropImg.cropper({\n        viewMode: 1,\n        center: false,\n        aspectRatio: 1,\n        modal: true,\n        scalable: false,\n        rotatable: true,\n        checkOrientation: true,\n        zoomable: true,\n        dragMode: 'move',\n        guides: false,\n        zoomOnTouch: false,\n        zoomOnWheel: false,\n        cropBoxMovable: false,\n        cropBoxResizable: false,\n        toggleDragModeOnDblclick: false,\n        built: function() {\n          const $image = $(this);\n          const container = $image.cropper('getContainerData');\n          const { cropBoxWidth, cropBoxHeight } = _this;\n\n          return $image.cropper('setCropBoxData', {\n            width: cropBoxWidth,\n            height: cropBoxHeight,\n            left: (container.width - cropBoxWidth) / 2,\n            top: (container.height - cropBoxHeight) / 2,\n          });\n        },\n      });\n    }\n\n    onModalHide() {\n      return this.modalCropImg.attr('src', '').cropper('destroy');\n    }\n\n    onUploadImageBtnClick(e) {\n      e.preventDefault();\n      this.setBlob();\n      this.setPreview();\n      this.modalCrop.modal('hide');\n      return this.fileInput.val('');\n    }\n\n    onActionBtnClick(btn) {\n      var data, result;\n      data = $(btn).data();\n      if (this.modalCropImg.data('cropper') && data.method) {\n        return (result = this.modalCropImg.cropper(data.method, data.option));\n      }\n    }\n\n    onFileInputChange(e, input) {\n      return this.readFile(input);\n    }\n\n    readFile(input) {\n      var _this, reader;\n      _this = this;\n      reader = new FileReader();\n      reader.onload = () => {\n        _this.modalCropImg.attr('src', reader.result);\n        return _this.modalCrop.modal('show');\n      };\n      return reader.readAsDataURL(input.files[0]);\n    }\n\n    dataURLtoBlob(dataURL) {\n      var array, binary, i, len, v;\n      binary = atob(dataURL.split(',')[1]);\n      array = [];\n\n      for (i = 0, len = binary.length; i < len; i += 1) {\n        v = binary[i];\n        array.push(binary.charCodeAt(i));\n      }\n      return new Blob([new Uint8Array(array)], {\n        type: 'image/png',\n      });\n    }\n\n    setPreview() {\n      var filename;\n      this.previewImage.attr('src', this.dataURL);\n      filename = this.fileInput.val().replace(FILENAMEREGEX, '');\n      return this.filename.text(filename);\n    }\n\n    setBlob() {\n      this.dataURL = this.modalCropImg\n        .cropper('getCroppedCanvas', {\n          width: 200,\n          height: 200,\n        })\n        .toDataURL('image/png');\n      return (this.croppedImageBlob = this.dataURLtoBlob(this.dataURL));\n    }\n\n    getBlob() {\n      return this.croppedImageBlob;\n    }\n  }\n\n  $.fn.glCrop = function(opts) {\n    return this.each(function() {\n      return $(this).data('glcrop', new GitLabCrop(this, opts));\n    });\n  };\n})(window.gl || (window.gl = {}));\n","import $ from 'jquery';\nimport axios from '~/lib/utils/axios_utils';\nimport flash from '../flash';\nimport { parseBoolean } from '~/lib/utils/common_utils';\n\nexport default class Profile {\n  constructor({ form } = {}) {\n    this.onSubmitForm = this.onSubmitForm.bind(this);\n    this.form = form || $('.edit-user');\n    this.setRepoRadio();\n    this.bindEvents();\n    this.initAvatarGlCrop();\n  }\n\n  initAvatarGlCrop() {\n    const cropOpts = {\n      filename: '.js-avatar-filename',\n      previewImage: '.avatar-image .avatar',\n      modalCrop: '.modal-profile-crop',\n      pickImageEl: '.js-choose-user-avatar-button',\n      uploadImageBtn: '.js-upload-user-avatar',\n      modalCropImg: '.modal-profile-crop-image',\n    };\n    this.avatarGlCrop = $('.js-user-avatar-input')\n      .glCrop(cropOpts)\n      .data('glcrop');\n  }\n\n  bindEvents() {\n    $('.js-preferences-form').on('change.preference', 'input[type=radio]', this.submitForm);\n    $('#user_notification_email').on('change', this.submitForm);\n    $('#user_notified_of_own_activity').on('change', this.submitForm);\n    this.form.on('submit', this.onSubmitForm);\n  }\n\n  submitForm() {\n    return $(this)\n      .parents('form')\n      .submit();\n  }\n\n  onSubmitForm(e) {\n    e.preventDefault();\n    return this.saveForm();\n  }\n\n  saveForm() {\n    const self = this;\n    const formData = new FormData(this.form.get(0));\n    const avatarBlob = this.avatarGlCrop.getBlob();\n\n    if (avatarBlob != null) {\n      formData.append('user[avatar]', avatarBlob, 'avatar.png');\n    }\n\n    formData.delete('user[avatar]-trigger');\n\n    axios({\n      method: this.form.attr('method'),\n      url: this.form.attr('action'),\n      data: formData,\n    })\n      .then(({ data }) => {\n        if (avatarBlob != null) {\n          this.updateHeaderAvatar();\n        }\n\n        flash(data.message, 'notice');\n      })\n      .then(() => {\n        window.scrollTo(0, 0);\n        // Enable submit button after requests ends\n        self.form.find(':input[disabled]').enable();\n      })\n      .catch(error => flash(error.message));\n  }\n\n  updateHeaderAvatar() {\n    $('.header-user-avatar').attr('src', this.avatarGlCrop.dataURL);\n  }\n\n  setRepoRadio() {\n    const multiEditRadios = $('input[name=\"user[multi_file]\"]');\n    if (parseBoolean(this.newRepoActivated)) {\n      multiEditRadios.filter('[value=on]').prop('checked', true);\n    } else {\n      multiEditRadios.filter('[value=off]').prop('checked', true);\n    }\n  }\n}\n","import $ from 'jquery';\nimport '~/profile/gl_crop';\nimport Profile from '~/profile/profile';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  // eslint-disable-next-line func-names\n  $(document).on('input.ssh_key', '#key_key', function() {\n    const $title = $('#key_title');\n    const comment = $(this)\n      .val()\n      .match(/^\\S+ \\S+ (.+)\\n?$/);\n\n    // Extract the SSH Key title from its comment\n    if (comment && comment.length > 1) {\n      $title.val(comment[1]).change();\n    }\n  });\n\n  new Profile(); // eslint-disable-line no-new\n});\n"],"sourceRoot":""}