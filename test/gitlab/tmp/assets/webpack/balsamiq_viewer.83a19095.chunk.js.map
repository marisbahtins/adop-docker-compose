{"version":3,"sources":["webpack:///./blob/balsamiq/balsamiq_viewer.js","webpack:///./blob/balsamiq_viewer.js"],"names":["PREVIEW_TEMPLATE","_template","BalsamiqViewer","viewer","_classCallCheck","this","preview","JSON","parse","resource","values","name","endpoint","_this","Promise","resolve","reject","xhr","XMLHttpRequest","open","responseType","onload","loadEvent","fileLoaded","onerror","send","target","status","renderFile","_this2","container","document","createElement","initDatabase","response","getPreviews","forEach","renderedPreview","renderPreview","appendChild","classList","add","data","previewBinary","Uint8Array","database","sqljs","Database","exec","map","parsePreview","resourceID","concat","previewElement","innerHTML","renderTemplate","getResource","parseTitle","image","onError","Flash","loadBalsamiqFile","getElementById","Element","dataset","loadFile","catch","__webpack_require__","d","__webpack_exports__"],"mappings":"8XAGA,IAAMA,EAAmBC,mBAAS,4MA8GnBC,aApGb,SAAAA,EAAYC,gGAAQC,CAAAC,KAAAH,GAClBG,KAAKF,OAASA,6DAkFIG,GAClB,OAAOC,KAAKC,MAAMF,EAAQ,uCAWVG,GAChB,OAAOF,KAAKC,MAAMC,EAASC,OAAO,GAAG,IAAIC,2CA5FlCC,GAAU,IAAAC,EAAAR,KACjB,OAAO,IAAIS,QAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAM,IAAIC,eAEhBD,EAAIE,KAAK,MAAOP,GAAU,GAC1BK,EAAIG,aAAe,cACnBH,EAAII,OAAS,SAAAC,GAAS,OAAIT,EAAKU,WAAWD,EAAWP,EAASC,IAC9DC,EAAIO,QAAUR,EAEdC,EAAIQ,4CAIGH,EAAWP,EAASC,GAC7B,OAAgC,MAA5BM,EAAUI,OAAOC,OAAuBX,KAE5CX,KAAKuB,WAAWN,GAETP,wCAGEO,GAAW,IAAAO,EAAAxB,KACdyB,EAAYC,SAASC,cAAc,MAEzC3B,KAAK4B,aAAaX,EAAUI,OAAOQ,UAElB7B,KAAK8B,cACbC,QAAQ,SAAA9B,GACf,IAAM+B,EAAkBR,EAAKS,cAAchC,GAE3CwB,EAAUS,YAAYF,KAGxBP,EAAUU,UAAUC,IAAI,eACxBX,EAAUU,UAAUC,IAAI,YAExBpC,KAAKF,OAAOoC,YAAYT,wCAGbY,GACX,IAAMC,EAAgB,IAAIC,WAAWF,GAErCrC,KAAKwC,SAAW,IAAIC,IAAMC,SAASJ,yCAMnC,OAFmBtC,KAAKwC,SAASG,KAAK,4BAEpB,GAAGtC,OAAOuC,IAAI/C,EAAegD,kDAGrCC,GAGV,OAFkB9C,KAAKwC,SAASG,KAAd,uCAAAI,OAA0DD,EAA1D,MAED,yCAGL7C,GACZ,IAAM+C,EAAiBtB,SAASC,cAAc,MAK9C,OAHAqB,EAAeb,UAAUC,IAAI,WAC7BY,EAAeC,UAAYjD,KAAKkD,eAAejD,GAExC+C,yCAGM/C,GACb,IAAMG,EAAWJ,KAAKmD,YAAYlD,EAAQ6C,YACpCxC,EAAOT,EAAeuD,WAAWhD,GAC/BiD,EAAUpD,EAAVoD,MAOR,OALiB1D,GACfW,OACA+C,+CCvFN,SAASC,IAGP,OAFc,IAAIC,IAAM,sCAKX,SAASC,IACtB,IAAM1D,EAAS4B,SAAS+B,eAAe,sBAEvC,GAAM3D,aAAkB4D,QAAxB,CAHyC,IAKjCnD,EAAaT,EAAO6D,QAApBpD,SAEe,IAAIV,EAAeC,GAC3B8D,SAASrD,GAAUsD,MAAMP,IAjB1CQ,EAAAC,EAAAC,EAAA,4BAAAR","file":"balsamiq_viewer.83a19095.chunk.js","sourcesContent":["import sqljs from 'sql.js';\nimport { template as _template } from 'underscore';\n\nconst PREVIEW_TEMPLATE = _template(`\n  <div class=\"card\">\n    <div class=\"card-header\"><%- name %></div>\n    <div class=\"card-body\">\n      <img class=\"img-thumbnail\" src=\"data:image/png;base64,<%- image %>\"/>\n    </div>\n  </div>\n`);\n\nclass BalsamiqViewer {\n  constructor(viewer) {\n    this.viewer = viewer;\n  }\n\n  loadFile(endpoint) {\n    return new Promise((resolve, reject) => {\n      const xhr = new XMLHttpRequest();\n\n      xhr.open('GET', endpoint, true);\n      xhr.responseType = 'arraybuffer';\n      xhr.onload = loadEvent => this.fileLoaded(loadEvent, resolve, reject);\n      xhr.onerror = reject;\n\n      xhr.send();\n    });\n  }\n\n  fileLoaded(loadEvent, resolve, reject) {\n    if (loadEvent.target.status !== 200) return reject();\n\n    this.renderFile(loadEvent);\n\n    return resolve();\n  }\n\n  renderFile(loadEvent) {\n    const container = document.createElement('ul');\n\n    this.initDatabase(loadEvent.target.response);\n\n    const previews = this.getPreviews();\n    previews.forEach(preview => {\n      const renderedPreview = this.renderPreview(preview);\n\n      container.appendChild(renderedPreview);\n    });\n\n    container.classList.add('list-inline');\n    container.classList.add('previews');\n\n    this.viewer.appendChild(container);\n  }\n\n  initDatabase(data) {\n    const previewBinary = new Uint8Array(data);\n\n    this.database = new sqljs.Database(previewBinary);\n  }\n\n  getPreviews() {\n    const thumbnails = this.database.exec('SELECT * FROM thumbnails');\n\n    return thumbnails[0].values.map(BalsamiqViewer.parsePreview);\n  }\n\n  getResource(resourceID) {\n    const resources = this.database.exec(`SELECT * FROM resources WHERE id = '${resourceID}'`);\n\n    return resources[0];\n  }\n\n  renderPreview(preview) {\n    const previewElement = document.createElement('li');\n\n    previewElement.classList.add('preview');\n    previewElement.innerHTML = this.renderTemplate(preview);\n\n    return previewElement;\n  }\n\n  renderTemplate(preview) {\n    const resource = this.getResource(preview.resourceID);\n    const name = BalsamiqViewer.parseTitle(resource);\n    const { image } = preview;\n\n    const template = PREVIEW_TEMPLATE({\n      name,\n      image,\n    });\n\n    return template;\n  }\n\n  static parsePreview(preview) {\n    return JSON.parse(preview[1]);\n  }\n\n  /*\n   * resource = {\n   *   columns: ['ID', 'BRANCHID', 'ATTRIBUTES', 'DATA'],\n   *   values: [['id', 'branchId', 'attributes', 'data']],\n   * }\n   *\n   * 'attributes' being a JSON string containing the `name` property.\n   */\n  static parseTitle(resource) {\n    return JSON.parse(resource.values[0][2]).name;\n  }\n}\n\nexport default BalsamiqViewer;\n","import Flash from '../flash';\nimport BalsamiqViewer from './balsamiq/balsamiq_viewer';\n\nfunction onError() {\n  const flash = new Flash('Balsamiq file could not be loaded.');\n\n  return flash;\n}\n\nexport default function loadBalsamiqFile() {\n  const viewer = document.getElementById('js-balsamiq-viewer');\n\n  if (!(viewer instanceof Element)) return;\n\n  const { endpoint } = viewer.dataset;\n\n  const balsamiqViewer = new BalsamiqViewer(viewer);\n  balsamiqViewer.loadFile(endpoint).catch(onError);\n}\n"],"sourceRoot":""}