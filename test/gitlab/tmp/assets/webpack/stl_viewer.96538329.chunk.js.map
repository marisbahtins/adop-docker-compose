{"version":3,"sources":["webpack:///./blob/3d_viewer/mesh_object.js","webpack:///./blob/3d_viewer/index.js","webpack:///./blob/stl_viewer.js"],"names":["materials","default","MeshLambertMaterial","color","wireframe","MeshObject","geo","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","geometry","computeBoundingSphere","rotation","set","Math","PI","boundingSphere","radius","scale","applyMatrix","Matrix4","makeScale","position","x","center","z","y","Mesh","type","material","STLLoader","STLLoaderClass","THREE","OrbitControls","OrbitControlsClass","Renderer","container","_3d_viewer_classCallCheck","renderWrapper","render","bind","objects","width","offsetWidth","height","loader","fov","camera","scene","add","setupRenderer","setupGrid","setupLight","controls","renderer","domElement","minDistance","maxDistance","enableKeys","loadFile","antialias","setClearColor","setPixelRatio","window","devicePixelRatio","setSize","pointLight","castShadow","ambientLight","grid","load","dataset","endpoint","obj","push","start","setDefaultCameraPosition","innerHTML","appendChild","parentNode","classList","remove","requestAnimationFrame","forEach","changeMaterial","dist","sin","lookAt","update","__webpack_exports__","viewer","document","getElementById","slice","querySelectorAll","el","addEventListener","e","target","preventDefault","querySelector","blur","changeObjectMaterials"],"mappings":"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","file":"stl_viewer.96538329.chunk.js","sourcesContent":["import { Matrix4, MeshLambertMaterial, Mesh } from 'three/build/three.module';\n\nconst defaultColor = 0xe24329;\nconst materials = {\n  default: new MeshLambertMaterial({\n    color: defaultColor,\n  }),\n  wireframe: new MeshLambertMaterial({\n    color: defaultColor,\n    wireframe: true,\n  }),\n};\n\nexport default class MeshObject extends Mesh {\n  constructor(geo) {\n    super(geo, materials.default);\n\n    this.geometry.computeBoundingSphere();\n\n    this.rotation.set(-Math.PI / 2, 0, 0);\n\n    if (this.geometry.boundingSphere.radius > 4) {\n      const scale = 4 / this.geometry.boundingSphere.radius;\n\n      this.geometry.applyMatrix(new Matrix4().makeScale(scale, scale, scale));\n      this.geometry.computeBoundingSphere();\n\n      this.position.x = -this.geometry.boundingSphere.center.x;\n      this.position.z = this.geometry.boundingSphere.center.y;\n    }\n  }\n\n  changeMaterial(type) {\n    this.material = materials[type];\n  }\n}\n","import * as THREE from 'three/build/three.module';\nimport STLLoaderClass from 'three-stl-loader';\nimport OrbitControlsClass from 'three-orbit-controls';\nimport MeshObject from './mesh_object';\n\nconst STLLoader = STLLoaderClass(THREE);\nconst OrbitControls = OrbitControlsClass(THREE);\n\nexport default class Renderer {\n  constructor(container) {\n    this.renderWrapper = this.render.bind(this);\n    this.objects = [];\n\n    this.container = container;\n    this.width = this.container.offsetWidth;\n    this.height = 500;\n\n    this.loader = new STLLoader();\n\n    this.fov = 45;\n    this.camera = new THREE.PerspectiveCamera(this.fov, this.width / this.height, 1, 1000);\n\n    this.scene = new THREE.Scene();\n\n    this.scene.add(this.camera);\n\n    // Set up the viewer\n    this.setupRenderer();\n    this.setupGrid();\n    this.setupLight();\n\n    // Set up OrbitControls\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n    this.controls.minDistance = 5;\n    this.controls.maxDistance = 30;\n    this.controls.enableKeys = false;\n\n    this.loadFile();\n  }\n\n  setupRenderer() {\n    this.renderer = new THREE.WebGLRenderer({\n      antialias: true,\n    });\n\n    this.renderer.setClearColor(0xffffff);\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n    this.renderer.setSize(this.width, this.height);\n  }\n\n  setupLight() {\n    // Point light illuminates the object\n    const pointLight = new THREE.PointLight(0xffffff, 2, 0);\n\n    pointLight.castShadow = true;\n\n    this.camera.add(pointLight);\n\n    // Ambient light illuminates the scene\n    const ambientLight = new THREE.AmbientLight(0xffffff, 1);\n    this.scene.add(ambientLight);\n  }\n\n  setupGrid() {\n    this.grid = new THREE.GridHelper(20, 20, 0x000000, 0x000000);\n\n    this.scene.add(this.grid);\n  }\n\n  loadFile() {\n    this.loader.load(this.container.dataset.endpoint, geo => {\n      const obj = new MeshObject(geo);\n\n      this.objects.push(obj);\n      this.scene.add(obj);\n\n      this.start();\n      this.setDefaultCameraPosition();\n    });\n  }\n\n  start() {\n    // Empty the container first\n    this.container.innerHTML = '';\n\n    // Add to DOM\n    this.container.appendChild(this.renderer.domElement);\n\n    // Make controls visible\n    this.container.parentNode.classList.remove('is-stl-loading');\n\n    this.render();\n  }\n\n  render() {\n    this.renderer.render(this.scene, this.camera);\n\n    requestAnimationFrame(this.renderWrapper);\n  }\n\n  changeObjectMaterials(type) {\n    this.objects.forEach(obj => {\n      obj.changeMaterial(type);\n    });\n  }\n\n  setDefaultCameraPosition() {\n    const obj = this.objects[0];\n    const radius = obj.geometry.boundingSphere.radius / 1.5;\n    const dist = radius / Math.sin((this.fov * (Math.PI / 180)) / 2);\n\n    this.camera.position.set(0, dist + 1, dist);\n\n    this.camera.lookAt(this.grid);\n    this.controls.update();\n  }\n}\n","import Renderer from './3d_viewer';\n\nexport default () => {\n  const viewer = new Renderer(document.getElementById('js-stl-viewer'));\n\n  [].slice.call(document.querySelectorAll('.js-material-changer')).forEach(el => {\n    el.addEventListener('click', e => {\n      const { target } = e;\n\n      e.preventDefault();\n\n      document.querySelector('.js-material-changer.active').classList.remove('active');\n      target.classList.add('active');\n      target.blur();\n\n      viewer.changeObjectMaterials(target.dataset.type);\n    });\n  });\n};\n"],"sourceRoot":""}