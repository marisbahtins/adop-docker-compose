{"version":3,"sources":["webpack:///./pages/profiles/show/emoji_menu.js","webpack:///./pages/profiles/show/index.js"],"names":["EmojiMenu","emoji","toggleButtonSelector","menuClass","selectEmojiCallback","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","AwardsHandler","$emojiButton","awardUrl","selectedEmoji","callback","glEmojiTag","document","addEventListener","toggleEmojiMenuButton","querySelector","statusEmojiField","getElementById","statusMessageField","toggleNoEmojiPlaceholder","isVisible","classList","toggle","findStatusEmoji","removeStatusEmoji","statusEmoji","remove","emojiTag","value","innerHTML","GfmAutoComplete","setup","$","emojis","Promise","resolve","then","__webpack_require__","bind","Emoji","bindEvents","defaultEmojiTag","hasStatusMessage","trim","dataset","name","catch","createFlash"],"mappings":"o/BAkBeA,cAdb,SAAAA,EAAYC,EAAOC,EAAsBC,EAAWC,GAAqB,IAAAC,EAAA,mGAAAC,CAAAC,KAAAP,IACvEK,EAAAG,EAAAD,KAAAE,EAAAT,GAAAU,KAAAH,KAAMN,KAEDG,oBAAsBA,EAC3BC,EAAKH,qBAAuBA,EAC5BG,EAAKF,UAAYA,EALsDE,wPADnDM,gDASZC,EAAcC,EAAUC,EAAeC,GAC/CR,KAAKH,oBAAoBU,EAAeP,KAAKN,MAAMe,WAAWF,IAC9DC,yCCPJE,SAASC,iBAAiB,mBAAoB,WAC5C,IACMC,EAAwBF,SAASG,cADD,yBAEhCC,EAAmBJ,SAASK,eAAe,yBAC3CC,EAAqBN,SAASK,eAAe,2BAE7CE,EAA2B,SAAAC,GACJR,SAASK,eAAe,2BAChCI,UAAUC,OAAO,UAAWF,IAG3CG,EAAkB,kBAAMT,EAAsBC,cAAc,aAC5DS,EAAoB,WACxB,IAAMC,EAAcF,IAChBE,GACFA,EAAYC,UAIV3B,EAAsB,SAACH,EAAO+B,GAClCX,EAAiBY,MAAQhC,EACzBuB,GAAyB,GACzBK,IACAV,EAAsBe,WAAaF,GAGZf,SAASK,eAAe,+BAChCJ,iBAAiB,QAAS,WACzCG,EAAiBY,MAAQ,GACzBV,EAAmBU,MAAQ,GAC3BJ,IACAL,GAAyB,MAGD,IAAIW,KACZC,MAAMC,IAAEd,IAAuBe,QAAQ,IAEzDC,QAAAC,UAAAC,KAAAC,EAAAC,KAAA,WACGF,KAAK,SAAAG,GACc,IAAI5C,EACpB4C,EAvCgC,wBAyChC,uBACAxC,GAEQyC,aAEV,IAAMC,EAAkBF,EAAM5B,WAjDT,kBAkDrBO,EAAmBL,iBAAiB,QAAS,WAC3C,IAAM6B,EAAuD,KAApCxB,EAAmBU,MAAMe,OAC5ClB,EAAcF,IAChBmB,GAAoBjB,IAIpBiB,GACFvB,GAAyB,GACzBL,EAAsBe,WAAaY,GA3DlB,mBA4DRhB,EAAYmB,QAAQC,OAC7B1B,GAAyB,GACzBK,UAILsB,MAAM,kBAAMC,YAAY","file":"pages.profiles.show.4c936c88.chunk.js","sourcesContent":["import '~/commons/bootstrap';\nimport { AwardsHandler } from '~/awards_handler';\n\nclass EmojiMenu extends AwardsHandler {\n  constructor(emoji, toggleButtonSelector, menuClass, selectEmojiCallback) {\n    super(emoji);\n\n    this.selectEmojiCallback = selectEmojiCallback;\n    this.toggleButtonSelector = toggleButtonSelector;\n    this.menuClass = menuClass;\n  }\n\n  postEmoji($emojiButton, awardUrl, selectedEmoji, callback) {\n    this.selectEmojiCallback(selectedEmoji, this.emoji.glEmojiTag(selectedEmoji));\n    callback();\n  }\n}\n\nexport default EmojiMenu;\n","import $ from 'jquery';\nimport createFlash from '~/flash';\nimport GfmAutoComplete from '~/gfm_auto_complete';\nimport EmojiMenu from './emoji_menu';\n\nconst defaultStatusEmoji = 'speech_balloon';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const toggleEmojiMenuButtonSelector = '.js-toggle-emoji-menu';\n  const toggleEmojiMenuButton = document.querySelector(toggleEmojiMenuButtonSelector);\n  const statusEmojiField = document.getElementById('js-status-emoji-field');\n  const statusMessageField = document.getElementById('js-status-message-field');\n\n  const toggleNoEmojiPlaceholder = isVisible => {\n    const placeholderElement = document.getElementById('js-no-emoji-placeholder');\n    placeholderElement.classList.toggle('hidden', !isVisible);\n  };\n\n  const findStatusEmoji = () => toggleEmojiMenuButton.querySelector('gl-emoji');\n  const removeStatusEmoji = () => {\n    const statusEmoji = findStatusEmoji();\n    if (statusEmoji) {\n      statusEmoji.remove();\n    }\n  };\n\n  const selectEmojiCallback = (emoji, emojiTag) => {\n    statusEmojiField.value = emoji;\n    toggleNoEmojiPlaceholder(false);\n    removeStatusEmoji();\n    toggleEmojiMenuButton.innerHTML += emojiTag;\n  };\n\n  const clearEmojiButton = document.getElementById('js-clear-user-status-button');\n  clearEmojiButton.addEventListener('click', () => {\n    statusEmojiField.value = '';\n    statusMessageField.value = '';\n    removeStatusEmoji();\n    toggleNoEmojiPlaceholder(true);\n  });\n\n  const emojiAutocomplete = new GfmAutoComplete();\n  emojiAutocomplete.setup($(statusMessageField), { emojis: true });\n\n  import(/* webpackChunkName: 'emoji' */ '~/emoji')\n    .then(Emoji => {\n      const emojiMenu = new EmojiMenu(\n        Emoji,\n        toggleEmojiMenuButtonSelector,\n        'js-status-emoji-menu',\n        selectEmojiCallback,\n      );\n      emojiMenu.bindEvents();\n\n      const defaultEmojiTag = Emoji.glEmojiTag(defaultStatusEmoji);\n      statusMessageField.addEventListener('input', () => {\n        const hasStatusMessage = statusMessageField.value.trim() !== '';\n        const statusEmoji = findStatusEmoji();\n        if (hasStatusMessage && statusEmoji) {\n          return;\n        }\n\n        if (hasStatusMessage) {\n          toggleNoEmojiPlaceholder(false);\n          toggleEmojiMenuButton.innerHTML += defaultEmojiTag;\n        } else if (statusEmoji.dataset.name === defaultStatusEmoji) {\n          toggleNoEmojiPlaceholder(true);\n          removeStatusEmoji();\n        }\n      });\n    })\n    .catch(() => createFlash('Failed to load emoji list.'));\n});\n"],"sourceRoot":""}